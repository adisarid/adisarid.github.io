<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linear models | Adi Sarid</title>
    <link>https://adisarid.github.io/tag/linear-models/</link>
      <atom:link href="https://adisarid.github.io/tag/linear-models/index.xml" rel="self" type="application/rss+xml" />
    <description>linear models</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2021 Adi Sarid</copyright><lastBuildDate>Fri, 13 Dec 2019 12:00:00 +0000</lastBuildDate>
    <image>
      <url>https://adisarid.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>linear models</title>
      <link>https://adisarid.github.io/tag/linear-models/</link>
    </image>
    
    <item>
      <title>Confidence and prediction intervals explained... (with a Shiny app!)</title>
      <link>https://adisarid.github.io/post/2019-12-13-confidence_prediction_intervals_explained/</link>
      <pubDate>Fri, 13 Dec 2019 12:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2019-12-13-confidence_prediction_intervals_explained/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This semester I started teaching introduction to statistics and data analysis with R, at Tel-Aviv university.&lt;/p&gt;
&lt;p&gt;I put in a lot of efforts into bringing practical challenges, examples from real life, and a lot of demonstrations of statistical theory with R. This post is an example for how I’ve been using R code (and specifically Shiny apps) to demonstrate statistical theory, concepts and provide intuition.&lt;/p&gt;
&lt;div id=&#34;whats-the-difference-between-confidence-and-prediction-intervals&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What’s the difference between confidence and prediction intervals?&lt;/h2&gt;
&lt;p&gt;Last week I taught multiple linear regression, and I noticed that students have a hard time comprehending the difference between confidence intervals and prediction intervals. The former being an interval for the model (i.e., interval for the underlying model), and the latter being an interval for a noval observation.&lt;/p&gt;
&lt;p&gt;As the sample size increases, our uncertainty of the model’s parameters decreases, but the uncertainty in the value of a new observation, &lt;span class=&#34;math inline&#34;&gt;\(y_0\)&lt;/span&gt; is associated with variance of &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; (the random variable from which &lt;span class=&#34;math inline&#34;&gt;\(y_0\)&lt;/span&gt; is drawn). Hence, it has a lower bound, based on that variance.&lt;/p&gt;
&lt;p&gt;In R, you can get a prediction or a confidence interval by using either&lt;/p&gt;
&lt;p&gt;&lt;code&gt;predict(object, newdata, interval = &#34;prediction&#34;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;p&gt;&lt;code&gt;predict(object, newdata, interval = &#34;confidence&#34;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For a prediction or for a confidence interval, respectively.&lt;/p&gt;
&lt;p&gt;To help me illustrate the differences between the two, I decided to build a small Shiny web app. It shows the differences between confidence intervals, prediction intervals, the regression fit, and the actual (original) model.&lt;/p&gt;
&lt;p&gt;The app is available &lt;a href=&#34;https://sarid.shinyapps.io/intervals_demo/&#34;&gt;here&lt;/a&gt;, and the source code is available on &lt;a href=&#34;https://github.com/adisarid/prediction_confidence_intervals_demo&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this app you can choose three types of models to demonstrate. Simple linear regression, and regression with a twist (&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; transformation on the &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(\sin\)&lt;/span&gt; transformation on the &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linear model &lt;span class=&#34;math inline&#34;&gt;\(y = a + bx + \epsilon\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log-linear model &lt;span class=&#34;math inline&#34;&gt;\(\log(y)=a+bx+\epsilon\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sine &lt;span class=&#34;math inline&#34;&gt;\(y = a + b\sin(x) + \epsilon\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the models are based on simple linear regression (&lt;code&gt;lm&lt;/code&gt; function), for the latter two models with either a &lt;code&gt;log&lt;/code&gt; or &lt;code&gt;sin&lt;/code&gt; transformation.&lt;/p&gt;
&lt;p&gt;The app allows you to play around with various values such as the &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; range, the model’s parameters (&lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;), the error’s standard deviation (&lt;span class=&#34;math inline&#34;&gt;\(\epsilon\)&lt;/span&gt;), and show or hide any of the following elements, on the chart:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The original function (i.e., the original model)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The sampled points&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The confidence interval&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The prediction interval&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The model’s fit&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to share the app or the app’s code. As mentioned above, the &lt;strong&gt;source code for the app&lt;/strong&gt; is available here: &lt;a href=&#34;https://github.com/adisarid/prediction_confidence_intervals_demo&#34;&gt;https://github.com/adisarid/prediction_confidence_intervals_demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s an example for what the app’s generating code and output looks like, for a model of the type &lt;span class=&#34;math inline&#34;&gt;\(\log(y) = 1 + \frac{x}{2} + \epsilon\)&lt;/span&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)

sample_size &amp;lt;- 90
x_range &amp;lt;- c(0, 1.5)
a &amp;lt;- 1
b &amp;lt;- 1.5
sigma &amp;lt;- 0.3

actual_function &amp;lt;- tibble(x = seq(x_range[1], x_range[2], by = 0.01)) %&amp;gt;% 
  mutate(actual_y = exp(a + b*x))

random_sample &amp;lt;- tibble(epsilon_err = rnorm(n = sample_size, 
                                            mean = 0,
                                            sd = sigma),
                        x = runif(n = sample_size,
                                  min = x_range[1],
                                  max = x_range[2])) %&amp;gt;% 
  mutate(sampled_y = exp(a + b*x + epsilon_err))

linear_model &amp;lt;- lm(formula = log(sampled_y) ~ x, data = random_sample)

prediction_i &amp;lt;- predict(object = linear_model,
                         newdata = actual_function,
                         interval = &amp;quot;prediction&amp;quot;) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  rename_at(vars(lwr,upr), ~paste0(., &amp;quot;_pi&amp;quot;)) %&amp;gt;% 
  mutate_all(exp)

confidence_i &amp;lt;- predict(object = linear_model,
                         newdata = actual_function,
                         interval = &amp;quot;confidence&amp;quot;) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  rename_at(vars(lwr,upr), ~paste0(., &amp;quot;_ci&amp;quot;)) %&amp;gt;% 
  select(-fit) %&amp;gt;% 
  mutate_all(exp)

intervals &amp;lt;- actual_function %&amp;gt;% 
  bind_cols(prediction_i,
            confidence_i)

ggplot() + 
  geom_line(data = actual_function, aes(x, actual_y, color = &amp;quot;Original Model&amp;quot;), size = 1) + 
  geom_point(data = random_sample, aes(x, sampled_y), alpha = 0.5) + 
  geom_line(data = intervals, 
            aes(x, fit, color = &amp;quot;Regression Fit&amp;quot;), size = 1) + 
  geom_line(data = intervals, 
            aes(x, lwr_pi, color = &amp;quot;Prediction Interval&amp;quot;), 
            linetype = 2, size = 1) +
  geom_line(data = intervals, 
            aes(x, upr_pi, color = &amp;quot;Prediction Interval&amp;quot;), 
            linetype = 2, size = 1) + 
  geom_line(data = intervals, 
            aes(x, lwr_ci, color = &amp;quot;Confidence Interval&amp;quot;), 
            linetype = 2, size = 1) + 
  geom_line(data = intervals, 
            aes(x, upr_ci, color = &amp;quot;Confidence Interval&amp;quot;), 
            linetype = 2, size = 1) + 
  theme_bw() + 
  xlab(&amp;quot;x&amp;quot;) + 
  ylab(&amp;quot;y&amp;quot;) + 
  ggtitle(&amp;quot;Log-linear: Model, Fit, Confidence and Prediction Intervals&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/post/2019-12-13-confidence_prediction_intervals_explained_files/figure-html/example%20for%20a%20log%20linear%20relationship-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Shiny apps are a great way to illustrate theoretical concepts, to provide intuition, and to let students experiment with parameters and see the outcomes. In this post I demonstrated how a Shiny app can be used to explain the concepts of a regression fit, confidence, and prediction intervals.&lt;/p&gt;
&lt;p&gt;If you used Shiny for interesting educational demonstrations I’d love to hear about it! feel free to share in the comments or message me on twitter &lt;span class=&#34;citation&#34;&gt;@SaridResearch&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
