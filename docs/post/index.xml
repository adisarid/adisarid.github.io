<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Adi Sarid</title>
    <link>https://adisarid.github.io/post/</link>
      <atom:link href="https://adisarid.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2021 Adi Sarid</copyright><lastBuildDate>Thu, 25 Nov 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://adisarid.github.io/media/icon_hu3addb1d2efd6524d7c75d3b1174538d9_629_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://adisarid.github.io/post/</link>
    </image>
    
    <item>
      <title>Creating your google chat R bot in under 5 minutes</title>
      <link>https://adisarid.github.io/post/creating-your-google-chat-r-bot-in-under-5-minutes/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/creating-your-google-chat-r-bot-in-under-5-minutes/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/post/creating-your-google-chat-r-bot-in-under-5-minutes/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;We use Google workspace as our email and document solution (i.e., the gmail solution for businesses). A few days ago I was chatting with one of my colleagues and noticed this feature called: “Manage webhooks” in the chat window. Apparently it’s a quick hack to create your own chat bot, which can communicate with a google chat, a group chat, or a chat space (different variations of a chat room, basically).&lt;/p&gt;
&lt;p&gt;What can you do with it? for us, we have a lot of automations going on, so when something goes wrong we usually use SMS text messaging to inform the owner of the process, or email to inform multiple recipients (i.e., with the &lt;code&gt;blastula&lt;/code&gt; package). The google chat bot solution provides another channel through which automation malfunctions can be reported. It’s really easy to set it up.&lt;/p&gt;
&lt;p&gt;For now, this only exists in the Google workspace version (the “regular” private gmail doesn’t have this feature turned on).&lt;/p&gt;
&lt;p&gt;Without further ado…&lt;/p&gt;
&lt;div id=&#34;creating-the-chat-bot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating the chat bot&lt;/h2&gt;
&lt;p&gt;Open a chat with a colleague or a “Space” (google’s chat rooms), by clicking on the “+” sign next to the “Spaces” (on the bottom left of the screen, and then “create space”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/google_spaces.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Give your space a name, an emoji, and add other persons (if you want others to receive these messages as well).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/my_cool_space.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Once the new space opens up, click on the arrow next to the space’s name (to open up the space menu), and then click on “Manage webhooks”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/space_menu.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Give your incoming webhook a new name (e.g. “My R chatbot”), and click save. &lt;em&gt;Copy the link&lt;/em&gt; which shows up:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/incoming_webhooks.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Open up a new R script, and make sure you have the &lt;code&gt;httr&lt;/code&gt; package installed (use &lt;code&gt;install.packages(&#34;httr&#34;)&lt;/code&gt; if you don’t have it). Use the following code to send messages to your new chat room from R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;chat_url &amp;lt;- &amp;quot;&amp;lt;PASTE THE LINK YOU COPIED HERE&amp;gt;&amp;quot;

httr::POST(url = chat_url, 
           body = list(text = &amp;quot;Your text message goes *here*!&amp;quot;),
           encode = &amp;quot;json&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it! If you did everything right, you should see your message popping up in the chat space. You can install google chat mobile app if you want to receive the message to your mobile phone as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a really quick solution for creating your chat bot using http requests and google chat. You can probably do something very similar with Slack and other similar solutions.&lt;/p&gt;
&lt;p&gt;Currenly, I use this mostly for reporting on automated processes which run R scripts, and let me know about the automation results and errors if occurred. Obviously, you can a lot more with it. Let your imagination run wild and tell me what you ended up with!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Github Actions to update a shiny app on a private server</title>
      <link>https://adisarid.github.io/post/using-github-actions-to-update-a-shiny-app/</link>
      <pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/using-github-actions-to-update-a-shiny-app/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/post/using-github-actions-to-update-a-shiny-app/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This post will teach you how to set up continuous deployment of shiny apps hosted on your private server (i.e., on an EC2 instance, AWS lightsail, Digital Ocean droplet, etc.). I assume you already have your server running shiny server, and that you are using Github for your development.&lt;/p&gt;
&lt;p&gt;If you’re looking for continuous deployment of shiny apps to the shinyapps.io hosting service you can check out &lt;a href=&#34;https://blog.rmhogervorst.nl/blog/2021/02/27/deploy-to-shinyapps-io-from-github-actions/&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;continuous-what&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Continuous what…?!&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Continuous deployment&lt;/strong&gt; is the act of deploying your program (a shiny app in our case), every time it is updated, and doing so in an automated way.&lt;/p&gt;
&lt;p&gt;More rigorously, let’s assume you already have a shiny app that you are developing, and using Github as your main version control tool. You are deploying your app to a private server (i.e., on an AWS EC2, a lightsail instance, Digital Ocean droplet, or similar). To get your app up to the server, you cloned the app’s repository into the directory &lt;code&gt;/srv/shiny-server/YOUR_APP_NAME/&lt;/code&gt; . Every time your app is updated, you get into the directory to do a &lt;code&gt;git pull&lt;/code&gt; , to make sure the updates are applied to your production server.&lt;/p&gt;
&lt;p&gt;This can be quite of a headache, ssh-ing into the server, just to do a &lt;code&gt;git pull&lt;/code&gt;. Wouldn’t it be nice if the &lt;code&gt;git pull&lt;/code&gt; in your server would magically happen every time you push your updates to the main branch automatically? this is what the rest of this post is about.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-small-note-about-shiny-app-testing&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A small note about shiny app testing&lt;/h2&gt;
&lt;p&gt;Before I continue with this post, I would like to mention that any continuous integration should be coupled with automated tests for your app. This post doesn’t deal with testing at all (just the final act of deploying it). Rstudio has extensive documentation on shiny app testing &lt;a href=&#34;https://shiny.rstudio.com/articles/testing-overview.html&#34;&gt;here&lt;/a&gt;, as well as &lt;a href=&#34;https://mastering-shiny.org/scaling-testing.html&#34;&gt;this chapter here&lt;/a&gt; from the “Mastering Shiny” book.&lt;/p&gt;
&lt;p&gt;Such tests should be placed before the step I’m about to write about, and passing all tests should be a prerequisite for performing the actual deployment. For example, you can have tests run on every push (to any branch) thus making sure that your app is tested before you finally merge to your main branch (which is then automatically updated in production).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-process&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The process&lt;/h2&gt;
&lt;p&gt;Before diving deeper into the process, a short overview of the steps we’re going to do. We’re going to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Log in to the server, and create a new user with read/write access to the directory of the app we want to update.&lt;/li&gt;
&lt;li&gt;Create an SSH key for this user which will enable Github Actions to log in to the server.&lt;/li&gt;
&lt;li&gt;Add secrets to the Github repository (the SSH private key, hostname, user name, port).&lt;/li&gt;
&lt;li&gt;Add the SSH key as a repository deployment key.&lt;/li&gt;
&lt;li&gt;Create the workflow in the repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;creating-an-additional-user&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating an additional user&lt;/h3&gt;
&lt;p&gt;The first step is to create a new user which will be the user Github Actions is using to log in to your server. You can also use an existing user for that, but I prefer to separate my credentials with the credentials I provide external services (such as Github Actions). Log into your server and add a new user (replace &lt;code&gt;github_actions_user&lt;/code&gt; with the name you want):&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;sudo useradd github_actions_user&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next thing is to add write permissions for this newly created user on the directories we want Github Actions to be able to update. Let’s say that the app is called &lt;code&gt;my_shiny_app&lt;/code&gt;, and that the current owner of the app is the user &lt;code&gt;ubuntu&lt;/code&gt;. We’re going to replace the directory owner with our new user’s group and add &lt;code&gt;ubuntu&lt;/code&gt; to this group as well (to retain &lt;code&gt;ubuntu&lt;/code&gt;’s write permissions).&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;cd /srv/shiny-server/
sudo chown github_actions_user:github_actions_user -R my_shiny_app
sudo usermod -a -G github_actions_user ubuntu&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The middle line replaces the directory owner and the last line adds &lt;code&gt;ubuntu&lt;/code&gt; to the directory ownership (group).&lt;/p&gt;
&lt;p&gt;In my setup, users must authenticate with a key to ssh into the server (a password is not enough), so let’s create the keys.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-an-ssh-key-for-login&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating an SSH key for login&lt;/h3&gt;
&lt;p&gt;First thing is to switch to the new user:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;su - github_actions_user&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Following the instructions from &lt;a href=&#34;https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent&#34;&gt;here&lt;/a&gt; to create the new keys (when prompted for file location and for passphrase, just click Enter leaving the default location for the keys and no passphrase).&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;ssh-keygen -t ed25519 -C &amp;quot;your_email@example.com&amp;quot;
eval &amp;quot;$(ssh-agent -s)&amp;quot;
ssh-add ~/.ssh/id_ed25519&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Important note about using a passphrase&lt;/strong&gt;: after you type the first command you will be prompted for a passphrase. The passphrase encrypts the private key so that it can only be used by the user who knows the passphrase. However, if the repository of the app is private the Github Action will need the key to &lt;code&gt;git pull&lt;/code&gt; from the repository. The Github Action we are using (as far as my experience goes) doesn’t work well with private repositories which we access with keys protected by a passphrase, hence I used no passphrase on these keys. I’m pretty sure there’s a better way around it, if you find it - let me know (&lt;span class=&#34;citation&#34;&gt;@SaridResearch&lt;/span&gt; on twitter).&lt;/p&gt;
&lt;p&gt;Finally, add the key to the authorized list, like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;cat .ssh/id_ed25519.pub | ssh b@B &amp;#39;cat &amp;gt;&amp;gt; .ssh/authorized_keys&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-secrets-to-the-repository&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Adding secrets to the repository&lt;/h3&gt;
&lt;p&gt;Now we want to add the required information to the repository. We need the following data: the private key for ssh-ing, the host, port, and user name.&lt;/p&gt;
&lt;p&gt;To get the private key while logged in as &lt;code&gt;github_actions_user&lt;/code&gt; type:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;nano ~/.ssh/id_ed25519&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy the key.&lt;/p&gt;
&lt;p&gt;Go to the repository of the app and click on &lt;strong&gt;settings&lt;/strong&gt; (the top tabs) -&amp;gt; &lt;strong&gt;secrets&lt;/strong&gt; (on the left menu). Click on “New repository secret”. Add a secret named &lt;em&gt;KEY&lt;/em&gt; and paste the contents of the key you just copied. Also add the following secrets in a similar manner &lt;em&gt;HOST&lt;/em&gt; (the host name), &lt;em&gt;PORT&lt;/em&gt; (for the most part it should be 22, unless you changed it), &lt;em&gt;USERNAME&lt;/em&gt; (in this example github_actions_user), &lt;em&gt;APPNAME&lt;/em&gt; (the location of the app within the shiny-server directory, e.g. &lt;code&gt;my_shiny_app&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-a-deployment-key&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Adding a deployment key&lt;/h3&gt;
&lt;p&gt;You need this step only if your repository is private - the public key should be added to Github, so that Github will allow you access to the repository. For that we need the public key. Get it by typing:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;nano ~/.ssh/id_ed25519.pub&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy the public key, in Github inside the repository of the app go to &lt;strong&gt;Deploy keys&lt;/strong&gt; (on the left menu), add a title to your key, such as “key for pulling to production”, and paste the public key.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-the-workflow&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Create the workflow&lt;/h3&gt;
&lt;p&gt;For the final step, we’re going to use the Github Action template, prepared by &lt;code&gt;appleboy&lt;/code&gt; and others (&lt;a href=&#34;https://github.com/appleboy/ssh-action&#34;&gt;from here&lt;/a&gt;). Just add the following yml file to your repository under: &lt;code&gt;.github/workflows/main.yml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# SSH into machine and git pull for updates

name: execute remote ssh to pull updates from master
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called &amp;quot;build&amp;quot;
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /srv/shiny-server/${{ secrets.APPNAME }}
            git pull&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;After completing these steps, every time you push something to the main branch it will magically update the app on your server. Be sure to check it works after a few commits (go to &lt;strong&gt;Actions&lt;/strong&gt; in the top menu and see that it works.&lt;/p&gt;
&lt;p&gt;What’s going on behind the scene is that Github Actions spawns up a Docker which logs in to your server via ssh, and then runs &lt;code&gt;cd /srv/shiny-server/my_shiny_app/&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For more information on this specific Github Action read &lt;a href=&#34;https://github.com/appleboy/ssh-action&#34; class=&#34;uri&#34;&gt;https://github.com/appleboy/ssh-action&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A data science detective story (and there&#39;s a villain too)</title>
      <link>https://adisarid.github.io/post/data-science-forensics/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/data-science-forensics/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/post/data-science-forensics/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Here is a detective story about some data science forensics, and there is a villain too.&lt;/p&gt;
&lt;div id=&#34;background&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;As a partner at a market research firm, I get involved in quite a lot of surveys. Some of them (such as the voice of customer surveys/customer satisfaction) include sending a personal email invitation with “an invite link”.&lt;/p&gt;
&lt;p&gt;Lately, we’ve started noticing a weird phenomenon: a lot of the links are opened (the email invitation link is clicked) but left unanswered. Also, we see a lot of cases where expect responses from a specific location but see that originate all over Europe.&lt;/p&gt;
&lt;p&gt;We started asking ourselves, are we witnessing the abuse of our surveys?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;validating-respondents&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Validating Respondents&lt;/h1&gt;
&lt;p&gt;One of my team members noticed some irregularities during our routine QA validations: responses were originating from unexpected remote locations all over Europe. A lot of duplicated IPs, as if a lot of people were suddenly using a VPN or something like that. Using a &lt;code&gt;whois&lt;/code&gt; service I understood that the links are being opened by Microsoft-owned IPs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Bot-ip-range.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;My first thought was that they started using some bot that examines the survey link within the email. Why exactly? at that point, I hypothesized it was some kind of caching going on, probably for speed improvements (but that’s not the deal).&lt;/p&gt;
&lt;p&gt;Since no false information was being entered in these “partial surveys”, no actual harm was done by this bot. Except that it’s not entirely accurate, you see - in some surveys, the practice is to embed the first question of the survey within the invitation email. That way the first click of the recipient includes the answer to the first question, e.g., a “Net Promoters Score” (NPS) or general satisfaction question. It helps with response rates, but unfortunately, the bot started clicking the links randomly and entering garbage data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;a-bot-with-random-thoughts&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;A bot with random thoughts&lt;/h1&gt;
&lt;p&gt;Trying to analyze when the problem started affecting my clients, I created a chart similar to the following, which compares partial answers (which are affected by the bot) versus complete answers (the bot doesn’t complete the survey entirely, so complete answers are real people). I’ve added an illustration (I’m not using real data here so as not to expose actual client’s data).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

responses &amp;lt;- read_csv(&amp;quot;example_data.csv&amp;quot;) %&amp;gt;% 
  mutate(response_time = factor(response_time, c(&amp;quot;Before 2021-06-01&amp;quot;, &amp;quot;After 2021-06-01&amp;quot;)))

ggplot(responses, aes(x = type, fill = factor(rating))) + 
  geom_bar(position = &amp;quot;fill&amp;quot;) + 
  facet_wrap(~response_time) + 
  scale_fill_brewer(palette = &amp;quot;RdYlGn&amp;quot;) + 
  guides(fill = guide_legend(&amp;quot;Rating&amp;quot;)) + 
  theme_bw() + 
  scale_y_continuous(labels = scales::percent) + 
  ylab(&amp;quot;Respondents [%]&amp;quot;) + 
  xlab(&amp;quot;&amp;quot;) + 
  ggtitle(&amp;quot;Distribution of complete vs. partial responses,\nbefore/after June 21&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/post/data-science-forensics/index.en_files/figure-html/comparison-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;See how the distribution of partial data after June 21’ is completely different from the distribution of the complete surveys and the partial surveys before June 21’?&lt;/p&gt;
&lt;p&gt;Another thing we noticed was that a lot of the partial surveys were being answered within 2-3 minutes (another strong indication for the work of Microsoft’s bot).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;so-what-actually-went-on&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;So what actually went on?&lt;/h1&gt;
&lt;p&gt;Microsoft has a feature called &lt;a href=&#34;https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/safe-links?view=o365-worldwide&#34;&gt;“Safe Links”&lt;/a&gt;, what this feature does is rewrite links, but in the process, it also visited some of the links in the email (or so I understand). It is supposed to prevent users from entering malicious websites through phishing emails (by scanning the links in every email which lands in the recipients’ inbox). In the process, it also screwed up our data collection.&lt;/p&gt;
&lt;p&gt;Once I figured that out, the road to putting a javascript that will discern real people from bots was not too long. We started implementing the javascript code in our surveys, but fortunately, I think that there was some change in the method this bot is employed, since we saw no bot entries during August.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;By the time we figure the problem and implemented a fix, the problem was already miraculously solved by someone else (maybe by Microsoft, the survey software company we are using, or someone else in the process). However, it was intriguing to try and figure out what’s going on, using data analysis as a forensics tool.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>YAPOEH! (Yet another post on error handling)</title>
      <link>https://adisarid.github.io/post/yet-another-post-on-error-handling/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/yet-another-post-on-error-handling/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Error catching can be hard to catch at times (no pun intended). If you’re not used to error handling, this short post might help you do it elegantly.&lt;/p&gt;
&lt;p&gt;There are many posts about error handling in R (and in fact the examples in the &lt;code&gt;purrr&lt;/code&gt; package documentation are not bad either). In this sense, this post is not original.&lt;/p&gt;
&lt;p&gt;However, I do demonstrate two approaches: both the base-R approach (&lt;code&gt;tryCatch&lt;/code&gt;) and the &lt;code&gt;purrr&lt;/code&gt; approach (&lt;code&gt;safely&lt;/code&gt; and &lt;code&gt;possibly&lt;/code&gt;). The post contains a concise summary of the two methods, with a very simple example.&lt;/p&gt;
&lt;p&gt;In this post I’m assuming you’re familiar with the basic concepts of functional programming.&lt;/p&gt;
&lt;div id=&#34;a-simple-example-for-a-function-with-errors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A simple example for a function with errors&lt;/h2&gt;
&lt;p&gt;Let’s analyze a very simple function which divides &lt;code&gt;number&lt;/code&gt; by 2. The function should return an error if its input is not an actual number, otherwise it will return &lt;code&gt;number/2&lt;/code&gt;. This function looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;divide2 &amp;lt;- function(number){
  
  # make sure the input is numeric (otherwise yield an error)
  if (!is.numeric(number)) {
    stop(paste(number, &amp;quot;is not a number!&amp;quot;))
  }
  
  # everything is fine, return the result
  number/2
}

divide2(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;divide2(pi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.570796&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But trying a string will yield an error:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;divide2(&amp;quot;foobar&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error in divide2(&amp;quot;foobar&amp;quot;) : foobar is not a number!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;where-is-the-problem&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Where is the problem?&lt;/h2&gt;
&lt;p&gt;What happens if we have a dataframe (or a list, or any other object for that matter) and we want to try to divide numbers within that object? Invalid values might crash our attempt completely.&lt;/p&gt;
&lt;p&gt;For example, this loops through two values (10 and &lt;span class=&#34;math inline&#34;&gt;\(\pi\)&lt;/span&gt;) and yields their division by 2.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(purrr)
map(list(10, pi), divide2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] 5
## 
## [[2]]
## [1] 1.570796&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But the next version fails completely, because it tries to loop through “foobar” which cannot be divided.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map(list(&amp;quot;foobar&amp;quot;, 10, pi), divide2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Error in .f(.x[[i]], ...) : foobar is not a number!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No matter where we place the invalid value “foobar”, it will fail our code completely, and we get nothing.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-solution-a-safelypossibly-wrapper&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The solution: a &lt;code&gt;safely&lt;/code&gt;/&lt;code&gt;possibly&lt;/code&gt; wrapper&lt;/h2&gt;
&lt;p&gt;Fortunately, there are very simple wrappers which can help us handle the errors elegantly. These are the two functions from the &lt;code&gt;purrr&lt;/code&gt; package: &lt;code&gt;safely&lt;/code&gt; and &lt;code&gt;possibly&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’ll first demonstrate the simpler version, &lt;code&gt;possibly&lt;/code&gt;. It allows us to replace errors with a chosen value. Since we expect a number, let’s replace errors with &lt;code&gt;NA_real_&lt;/code&gt; (which is like saying an unknown value which is a real number).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;possibly_divide2 &amp;lt;- possibly(divide2, otherwise = NA_real_, quiet = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;quiet = TRUE&lt;/code&gt; argument is just so errors will not be printed during the loop. Now we are ready to try our error safe variation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;possibly_out &amp;lt;- map(list(&amp;quot;foobar&amp;quot;, 10, pi), possibly_divide2)
possibly_out&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] NA
## 
## [[2]]
## [1] 5
## 
## [[3]]
## [1] 1.570796&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also use &lt;code&gt;unlist&lt;/code&gt; to turn the output into a simple vector, i.e. &lt;code&gt;unlist(possibly_out)&lt;/code&gt; will yield the vector &lt;em&gt;NA, 5, 1.5707963&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;safely&lt;/code&gt; variation has some more strength into it, since it also provides the error messages. The output is slightly more complex though.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;safely_divide2 &amp;lt;- safely(.f = divide2, otherwise = NA_real_, quiet = T)
safely_out &amp;lt;- map(list(&amp;quot;foobar&amp;quot;, 10, pi), safely_divide2)
safely_out&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [[1]]$result
## [1] NA
## 
## [[1]]$error
## &amp;lt;simpleError in .f(...): foobar is not a number!&amp;gt;
## 
## 
## [[2]]
## [[2]]$result
## [1] 5
## 
## [[2]]$error
## NULL
## 
## 
## [[3]]
## [[3]]$result
## [1] 1.570796
## 
## [[3]]$error
## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Following the approach suggested in the documentation of &lt;code&gt;safely&lt;/code&gt; (in the examples section), we can use &lt;code&gt;transpose()&lt;/code&gt; and &lt;code&gt;simplify_all()&lt;/code&gt; to arrange the output.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;simply_safe &amp;lt;- safely_out %&amp;gt;% 
  transpose() %&amp;gt;% 
  simplify_all()

simply_safe$result  # for the output values&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]       NA 5.000000 1.570796&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;simply_safe$error  # for the error messages&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## &amp;lt;simpleError in .f(...): foobar is not a number!&amp;gt;
## 
## [[2]]
## NULL
## 
## [[3]]
## NULL&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;for-comparisons-sake-how-would-you-trycatch-it&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;For comparison’s sake, how would you &lt;code&gt;tryCatch&lt;/code&gt; it?&lt;/h2&gt;
&lt;p&gt;The function &lt;code&gt;tryCatch&lt;/code&gt; is a base-R approach for error handling. The concept is similar but the syntax is different. Here is an example of how to build a safe &lt;code&gt;divide2&lt;/code&gt; function with &lt;code&gt;tryCatch&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;try_divide2 &amp;lt;- function(number){
  tryCatch(expr = {
    divide2(number)
  }, 
  error = function(e){
    NA_real_
  }
  )
}

map(list(&amp;quot;foobar&amp;quot;, pi, 10), try_divide2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] NA
## 
## [[2]]
## [1] 1.570796
## 
## [[3]]
## [1] 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As said - same output, different syntax. Choose your approach. As an appetizer, the same works with base-R functional programming as well. For example, with &lt;code&gt;lapply&lt;/code&gt; it will look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lapply(list(&amp;quot;foobar&amp;quot;, pi, 10), try_divide2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] NA
## 
## [[2]]
## [1] 1.570796
## 
## [[3]]
## [1] 5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;bonus-a-benchmark&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bonus: a benchmark&lt;/h2&gt;
&lt;p&gt;Before going off on your merry, error handled way, I also provide a short comparison between &lt;code&gt;safely&lt;/code&gt;, &lt;code&gt;possibly&lt;/code&gt;, and &lt;code&gt;tryCatch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s assume a data set with 20% errors. For simplicity, we’ll use a modified &lt;code&gt;log&lt;/code&gt; instead of our &lt;code&gt;divide2&lt;/code&gt; (similar to the example provided in &lt;code&gt;purrr&lt;/code&gt;’s documentation). It makes sense to fail &lt;code&gt;log&lt;/code&gt; in an all numeric vector (yield an error if there is a negative value). Since a negative log is &lt;code&gt;NaN&lt;/code&gt; (not an error but rather a warning) I’m creating an &lt;code&gt;error_prone_log&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tibble)
library(dplyr)
library(microbenchmark)
library(ggplot2)

error_prone_log &amp;lt;- function(x){
  if (x &amp;lt; 0){
    stop(&amp;quot;Negative x&amp;quot;)
  }
  
  log(x)
}

safe_log &amp;lt;- safely(error_prone_log, otherwise = NaN, quiet = T)
possible_log &amp;lt;- possibly(error_prone_log, otherwise = NaN, quiet = T)
tryCatch_log &amp;lt;- function(x){
  tryCatch(expr = error_prone_log(x),
           error = function(e){
             NaN
             })
}

set.seed(42)
test_values &amp;lt;- sample(
  c(runif(n = 80, min = 0, max = 100),
    runif(n = 20, min = -100, max = 0)),
  size = 100, replace = FALSE)

bench_results &amp;lt;- microbenchmark(map(test_values, safe_log),
                                map(test_values, possible_log),
                                map(test_values, tryCatch_log), 
                                times = 1000)

gt::gt(summary(bench_results)) %&amp;gt;% 
  gt::fmt_number(columns = 2:7, decimals = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#acvreehjjd .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#acvreehjjd .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#acvreehjjd .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#acvreehjjd .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#acvreehjjd .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#acvreehjjd .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#acvreehjjd .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#acvreehjjd .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#acvreehjjd .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#acvreehjjd .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#acvreehjjd .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#acvreehjjd .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#acvreehjjd .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#acvreehjjd .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#acvreehjjd .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#acvreehjjd .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#acvreehjjd .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#acvreehjjd .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#acvreehjjd .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#acvreehjjd .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#acvreehjjd .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#acvreehjjd .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#acvreehjjd .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#acvreehjjd .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#acvreehjjd .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#acvreehjjd .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#acvreehjjd .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#acvreehjjd .gt_left {
  text-align: left;
}

#acvreehjjd .gt_center {
  text-align: center;
}

#acvreehjjd .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#acvreehjjd .gt_font_normal {
  font-weight: normal;
}

#acvreehjjd .gt_font_bold {
  font-weight: bold;
}

#acvreehjjd .gt_font_italic {
  font-style: italic;
}

#acvreehjjd .gt_super {
  font-size: 65%;
}

#acvreehjjd .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;acvreehjjd&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34;&gt;
  
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;expr&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_right&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;min&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_right&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;lq&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_right&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;mean&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_right&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;median&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_right&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;uq&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_right&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;max&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_right&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;neval&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_left&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;cld&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;map(test_values, safe_log)&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;3.96&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;4.08&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;4.55&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;4.16&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;4.94&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;10.10&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;1000&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;  c&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;map(test_values, possible_log)&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;3.74&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;3.86&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;4.27&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;3.92&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;4.64&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;9.60&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;1000&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt; b &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;map(test_values, tryCatch_log)&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;2.97&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;3.05&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;3.45&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;3.09&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;3.68&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;73.99&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right&#34;&gt;1000&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;a  &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;autoplot(bench_results) + 
  ggtitle(&amp;quot;Comparison of safely, possibly, and tryCatch&amp;quot;) + 
  coord_flip(ylim = c(1.5, 15))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/post/2020-11-09-YAPOEH-yet-another-post-on-error-handling.en_files/figure-html/error%20prone%20data%20set-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As can be seen from the benchmark’s results, there is no doubt about it: &lt;code&gt;tryCatch&lt;/code&gt; is the fastest. The &lt;code&gt;purrr&lt;/code&gt; functions &lt;code&gt;safely&lt;/code&gt; and &lt;code&gt;possibly&lt;/code&gt; take longer to run. In my opinion though they are slightly more convenient in terms of syntax.&lt;/p&gt;
&lt;p&gt;In addition, the &lt;code&gt;safely&lt;/code&gt; variation allows us to retrieve the error messages conveniently for later examination. Again, this capability comes with a price when compared to &lt;code&gt;tryCatch&lt;/code&gt;, but it is roughly the same run time when compared to &lt;code&gt;possibly&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;When you have a long looping process which is prone to errors, for example a pricey web API call or a really large data set, you should aim to catch and handle errors gracefully instead of hoping for the best.&lt;/p&gt;
&lt;p&gt;If you really need to be efficient, it’s probably worth while to &lt;code&gt;tryCatch&lt;/code&gt;, and if your looking more for ease of use and code readability you should use &lt;code&gt;possibly&lt;/code&gt;. In case you need to examine the error messages more thoroughly, use &lt;code&gt;safely&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Good luck hunting down the errors!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Teaching with zoom breakout-rooms and the learnr package</title>
      <link>https://adisarid.github.io/post/2020-05-26-break-rooms-and-learnr/</link>
      <pubDate>Tue, 26 May 2020 11:06:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2020-05-26-break-rooms-and-learnr/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Corona has put us in an awkward situation, where we must rethink and revise our ways of doing things (teaching, working, baby sitting, balancing work and life, or any other related field of your choosing). I also see this as an opportunity to experiment and improve various things. Specifically I dedicate this post to some teaching methods I have adopted. Mostly: using breakout rooms (a zoom feature) and &lt;code&gt;learnr&lt;/code&gt; tutorials.&lt;/p&gt;
&lt;div id=&#34;the-challenges&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The challenges&lt;/h2&gt;
&lt;p&gt;I teach an undergraduate course in &lt;em&gt;introduction to statistics and data analysis with R&lt;/em&gt;, in Tel-Aviv university. The course involves statistical theory and practice with R. In general students found challenging to follow both theory and practice, and more so, considering that all lectures are conducted via zoom, due to Corona constraints.&lt;/p&gt;
&lt;p&gt;In order to alleviate some of these challenges, &lt;strong&gt;I decided to split the lectures to theory and labs in smaller groups.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;methodology&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Methodology&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;learnr&lt;/code&gt; is an R package which allows you to create an interactive html document (under the hood it’s based on RMarkdown and shiny). The result includes quizzes and chunks which can run R code. The chunks can come preloaded with some of the code and with hints/solutions.&lt;/p&gt;
&lt;p&gt;I teach a theoretical subject, and prepare a corresponding learnr tutorial on recent data sets from &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34;&gt;tidytuesday&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During my lecture, I have specific checkpoints in which I split the zoom session into breakout rooms. Breakout rooms is a zoom feature which splits the main session into smaller sessions and allows the host to jump between the smaller sessions. I found that splitting the main room into groups of 3-4 participants which then together tackle the learnr tutorial is both fun and a fruitful experience. I cycle between the rooms to provide individual help for the groups. Every few minutes (10-15 minuts, depending on the tutorial section’s length and complexity), I merge the group back together to the main session, solve the tutorial section and either continue with theory or give them another section of the tutorial to work on in the smaller groups.&lt;/p&gt;
&lt;p&gt;Each tutorial includes important blocks of data analysis, sort of a “mini project” such as: data import, visualizations, data transformations, and modeling. I direct the blocks according to the topic I covered in the theoretical part.&lt;/p&gt;
&lt;p&gt;Here are two examples for tutorials I made, which went very well in class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sarid.shinyapps.io/food_consumption_lab/&#34;&gt;Food consumption footprint&lt;/a&gt; with the source code &lt;a href=&#34;https://github.com/adisarid/intro_statistics_R/blob/master/labs/food_consumption.Rmd&#34;&gt;here&lt;/a&gt;. This one is about getting to know your data, visualizations, descriptive statistics, confidence intervals and hypothesis tests for the expectancy of a distribution.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sarid.shinyapps.io/independence_test/&#34;&gt;Volcanos&lt;/a&gt; with the source code &lt;a href=&#34;https://github.com/adisarid/intro_statistics_R/blob/master/labs/Independence%20test.Rmd&#34;&gt;here&lt;/a&gt;. This one is about independence Chi square test, and also includes a lot of data preparations and visualizations. By the end of it, students test if volcano type and elevation are related (independent statistically or not).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;important-notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Important notes&lt;/h2&gt;
&lt;p&gt;The first time you implement this, make sure the students understand how the zoom breakout feature works. Let them know you will be cycling through the rooms but that they can also use a ping/raise hand feature to call you.&lt;/p&gt;
&lt;p&gt;Zoom comes with two options for assignment to breakout rooms: either random or manual (by host). Both are sub-optimal. Manually assigning 30 students to 10 breakout rooms will take too long and random ignores study groups the students already have. You can fine tune the random assignment, but that too takes too long. There is another option to upload a csv file with the participant’s names in advanced which is done via the settings of the meeting (on the zoom web page settings).&lt;/p&gt;
&lt;p&gt;When you setup the rooms, you have an option to set a time-limit. I found it sub-optimal, because you don’t always know in advanced how long the exercise will take. Instead cycling through the rooms should give you a good sense on when to merge back the breakout rooms into the main session.&lt;/p&gt;
&lt;p&gt;For more help on using breakout rooms, follow this &lt;a href=&#34;https://support.zoom.us/hc/en-us/articles/206476093-Enabling-breakout-rooms&#34;&gt;link&lt;/a&gt; from zoom’s support website.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;This method, of using the zoom breakout rooms feature in combination with interactive &lt;code&gt;learnr&lt;/code&gt; looks like a good formula for getting the students engaged while learning the necessary theoretical and practical aspects of data analysis.&lt;/p&gt;
&lt;p&gt;If you are teaching interactively, I encourage you to give it a try! If you do, let me know how it went @&lt;a href=&#34;https://twitter.com/SaridResearch&#34;&gt;SaridResearch&lt;/a&gt; on twitter.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Set up RStudio server with Let&#39;s Encrypt SSL certificate</title>
      <link>https://adisarid.github.io/post/2020-03-06-setup_rstudio_server_with_ssl/</link>
      <pubDate>Fri, 06 Mar 2020 22:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2020-03-06-setup_rstudio_server_with_ssl/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;For a while now I’ve been struggling with various installation setup related to the open source versions of RStudio server, Shiny server (and dockerized versions of them).&lt;/p&gt;
&lt;p&gt;After browsing internet tutorials on-and-off for the last couple of weeks I’ve come to the conclusion that there is a small gap when it comes to setting up RStudio server and shiny server securely, i.e., with SSL certificates.&lt;/p&gt;
&lt;p&gt;I’ve put together this step-by-step post to close this gap (in part for self-documentation). I don’t cover dockerized versions here.&lt;/p&gt;
&lt;div id=&#34;step-1-or-actually-steps-1-10&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 1 (or actually steps 1-10)&lt;/h2&gt;
&lt;p&gt;Install rstudio server and shiny server on your choice of cloud provider. Common choices are AWS (EC2 or Lightsail, Digital Ocean, Azure, and Google. Anything works actually).&lt;/p&gt;
&lt;p&gt;Installation instructions are covered in detail in Dean Attali’s post &lt;a href=&#34;https://deanattali.com/2015/05/09/setup-rstudio-shiny-server-digital-ocean&#34;&gt;here&lt;/a&gt; which uses Digital Ocean.&lt;/p&gt;
&lt;p&gt;No use repeating everything in its entirety. I will however highlight two things I’ve found helpful and are a bit different from Dean’s post.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Selection of instance size (resources)&lt;/li&gt;
&lt;li&gt;AWS Lightsail’s deafult firewall settings&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;selection-of-instance-size&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Selection of instance size&lt;/h3&gt;
&lt;p&gt;I’ve found that opening an instance with low memory (i.e., 0.5-1Gb) is problematic. Its cheap, but if you’re installing packages such as &lt;code&gt;dplyr&lt;/code&gt; (included in &lt;code&gt;tidyverse&lt;/code&gt;), compiling the package within your server, will require more memory than what you have available. You can workaround this by increasing your swap file size (step 6 in Dean’s post), but eventually even R processes might give you a hard time in the future. I’ve been using a 4GB server, which seems to be ok for my purposes (and at the time of writing this post costs about $20 USD per month).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;aws-lightsails-firewall-settings&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;AWS Lightsail’s firewall settings&lt;/h3&gt;
&lt;p&gt;When using &lt;strong&gt;AWS Lightsail&lt;/strong&gt; (which I’ve been using), a default firewall rule is applied. This means that when you complete steps 7-8 in Dean’s post, your server will not work if you’re using AWS Lightsail. The reason for that is that AWS Lightsail built-in firewall blocks all ports except 22 and 80 by default (rstudio server uses 8787 and shiny server uses 3838). It doesn’t matter much, because by the end of this post we’ll be using port 443 (for secure SSL connection), but you can also make the non-secure version work out - useful for checking that your server is working. Let’s go ahead and open port 443 in your Lightsail instance (and explain how to also temporarily open 8787 and 3838).&lt;/p&gt;
&lt;p&gt;Click on the instance you’ve opened, and then go to the Networking tab. In this page you’ll see a “Firewall” title and beneath it a table with the currently open ports. Under the table click on “+ Add another”. Add HTTPS (under application), TCP (under protocol) and port 443, like in the following screenshot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#39;https://adisarid.github.io/media/lightsail_firewall_configuration.jpg&#39;&gt;&lt;/p&gt;
&lt;p&gt;If you want to temporarily enable direct access to port 8787 and 3838 (to check that your installation went well), you can do that as well (use “Custom” under application, TCP for protocol, and port 8787 (repeat for 3838 in an additional line).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;secure-you-server-with-ssl-encryption&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Secure you server with SSL encryption&lt;/h2&gt;
&lt;p&gt;Since you will probably be passing data back and forth between your remote server and local computer, you want to secure this data transfer with encryption. The best way to do this is using SSL certificates (it’s actually called TSL, the name SSL refers to a deprecated protocol, but everyone seems to still be using the SSL initials, &lt;a href=&#34;https://www.cloudflare.com/learning/ssl/what-is-ssl/&#34;&gt;see here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There is a free service called Let’s Encrypt which provides SSL certificates, which is what we’re going to use here. I’m actually adopting the approach of &lt;a href=&#34;https://docs.fuga.cloud/how-to-use-lets-encrypt-certificates-to-secure-nginxs-ssl-configuration&#34;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;install-lets-encrypt-and-get-certficates&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install Let’s Encrypt and get certficates&lt;/h3&gt;
&lt;p&gt;Install the following software on your linux server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt instal letsencrypt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update your nginx configuration as preperation for obtaining the let’s encrypt certificate. This step is needed because when requesting a certificate from let’s encrypt, the let’s encrypt server will try to authenticate your server.&lt;/p&gt;
&lt;p&gt;Use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/nginx/sites-enabled/default&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And add the following (replace &lt;code&gt;r.example.com&lt;/code&gt; with your domain):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        listen [::]:80;
        root /var/www/r.example.com/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name r.example.com;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get your SSL certificates using the following line, just replace &lt;code&gt;r.example.com&lt;/code&gt; with your subdomain.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;letsencrypt certonly -a webroot --webroot-path=/var/www/r.example.com/html/ -d r.example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update your nginx settings again&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/nginx/sites-enabled/default&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To have the following setup (remember to replace &lt;code&gt;r.example.com&lt;/code&gt; with your domain):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map $http_upgrade $connection_upgrade {
  default upgrade;
  &amp;#39;&amp;#39;      close;
}

# listens on port 80 and redirects traffic to secure alternative
server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name r.example.com;
        return 301 https://r.example.com$request_uri;
}

server {
        
        # SSL configuration
        
        listen 443 ssl;
        ssl_certificate /etc/letsencrypt/live/r.example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/r.example.com/privkey.pem;
        ssl_protocols TLSv1.2;

        ssl_ciphers EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
        ssl_prefer_server_ciphers On;
        ssl_session_cache shared:SSL:128m;
        add_header Strict-Transport-Security &amp;quot;max-age=31557600; includeSubDomains&amp;quot;;
        ssl_stapling on;
        ssl_stapling_verify on;

        root /var/www/r.example.com/html;

        server_name _;

        # Reroute traffic to shiny server (i.e., reverse proxy for port 3838)
        location /shiny/ {
           proxy_pass http://127.0.0.1:3838/;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection $connection_upgrade;
           rewrite ^(/shiny/[^/]+)$ $1/ permanent;
        }

        # Reroute traffic to rstudio server (i.e., reverse proxy for port 8787)
        location /rstudio/ {
           proxy_pass http://127.0.0.1:8787/;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection $connection_upgrade;
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your server should be working now, but since Let’s Encrypt certificates only last 90 days, lets put an automatically renewal process in place.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /opt/renewCerts.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Paste the following text:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
# This script renews all the Let&amp;#39;s Encrypt certificates with a validity &amp;lt; 30 days
if ! letsencrypt renew &amp;gt; /var/log/letsencrypt/renew.log 2&amp;gt;&amp;amp;1 ; then
    echo Automated renewal failed:
    cat /var/log/letsencrypt/renew.log
    exit 1
fi
nginx -t &amp;amp;&amp;amp; nginx -s reload&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure the script is owned and executable by root:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chown root.root /opt/renewCerts.sh
chmod u+x /opt/renewCerts.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add it to cron for auto execution:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo crontab -e&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@weekly /opt/renewCerts.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;all-should-be-set&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;All should be set!&lt;/h2&gt;
&lt;p&gt;Go ahead and browse to your domain (e.g., &lt;code&gt;https://r.example.com/rstudio&lt;/code&gt;). Check that you’re able to login properly and that all pages are secure on &lt;code&gt;https&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Impressions and notes from rstudio::conf2020</title>
      <link>https://adisarid.github.io/post/2020-01-31-rstudio-conf2020-recap/</link>
      <pubDate>Fri, 31 Jan 2020 06:08:00 -1000</pubDate>
      <guid>https://adisarid.github.io/post/2020-01-31-rstudio-conf2020-recap/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I’m just on my way back from this year’s rstudio::conf. Here’s an account of a few of the things which I found interesting, inspiring, or that might have some other impact in the future. I’m listing them by order of appearance in the conference.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/media/Hexagons_conf2020.jpg&#34; alt=&#34;The hexawall at rstudio::conf2020&#34; style=&#34;zoom:10%; float:right; padding-left:30px&#34;&gt;
&lt;!-- ![](/post/2020-01-31-rstudio-conf2020-recap_files/icon.png) --&gt;&lt;/p&gt;
&lt;div id=&#34;the-rmarkdown-and-interactive-dashboards-workshop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The RMarkdown and Interactive Dashboards Workshop&lt;/h2&gt;
&lt;p&gt;I participated as a TA in the RMarkdown and Interactive Dashboard workshop led by Carl Howe and Yihui Xie. The workshop dealt with creating RMarkdown documents. Specifically adding interactivity using the &lt;code&gt;flexdashboard&lt;/code&gt; package to turn a simple docuement into an interactive html with just a few &lt;code&gt;yaml&lt;/code&gt; configurations.&lt;/p&gt;
&lt;p&gt;Some attention was also given to combining different programming languages within documents, i.e. python via the &lt;code&gt;reticulate&lt;/code&gt; package, but also &lt;code&gt;css&lt;/code&gt; and many more.&lt;/p&gt;
&lt;p&gt;A lesser known feature (at least for me) was the &lt;code&gt;crosstalk&lt;/code&gt; package which makes it really easy for different widgets in an RMarkdown document talk to each other.&lt;/p&gt;
&lt;p&gt;Yihui talked about some cool tips and tricks and features of rmarkdown (and surrounding packages). For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The use of the &lt;code&gt;xaringan::infinite_moon_reader()&lt;/code&gt; to continously render an Rmd upon save (automatically knits the document)&lt;/li&gt;
&lt;li&gt;Creating animation inside Rmds&lt;/li&gt;
&lt;li&gt;LaTeX tricks within Rmds&lt;/li&gt;
&lt;li&gt;Caching time consuming Rmd chunks&lt;/li&gt;
&lt;li&gt;Many more&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actually, these are just a few, and there were 23 distinct tips. Yihui’s presentation is &lt;a href=&#34;https://slides.yihui.org/2020-rstudio-conf-rmarkdown-recipes.html&#34;&gt;available here&lt;/a&gt;. All the materials of this workshop, and in fact all the workshops, is available &lt;a href=&#34;https://github.com/rstudio-conf-2020&#34;&gt;in this github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s an example of an animation of a wave in an Rmd file. To replicate the example, use the following code in the chunk specifications: &lt;code&gt;{r, animation.hook=&#39;gifski&#39;, fig.height=3, interval = 0.15}&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_set &amp;lt;- crossing(frame = seq(0, 360, 30), x = seq(0, 2*pi, pi/10)) %&amp;gt;% 
  mutate(y = sin(x - frame*pi/360)) %&amp;gt;% 
  nest(data = c(x,y))

map(data_set$data, ~{
  ggplot(., aes(x, y)) + geom_line()
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/media/ggplot2_animated_wave.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Cool, isn’t it?&lt;/p&gt;
&lt;p&gt;If you’re into animations, there are other packages which can also accomplish this, such as the &lt;code&gt;gganimate&lt;/code&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;deploying-end-to-end-data-science-with-shiny-plumber-and-pins&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Deploying End-to-End Data Science with Shiny, Plumber, and Pins&lt;/h2&gt;
&lt;p&gt;A nice talk by Alex Gold from RStudio. Showed a use case for a plumber api combined with a shiny app that talk to each other. For me, mainly the concept of &lt;code&gt;pins&lt;/code&gt; as a quick approach for small to medium sized data sets was nice to see. You can easily put a data set in an S3 or any other means of storage on Azure, GCP, Github, etc. The downside compared to a database is that there is no frequent backup or an option to roll back changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;were-hitting-r-a-million-times-a-day-so-we-made-a-talk-about-it&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;We’re hitting R a million times a day so we made a talk about it&lt;/h2&gt;
&lt;p&gt;A talk by Heather and Jacqueline Nolis from T-Mobile. This was kind of a follow-up talk on what they discussed in the previous rstudio::conf (2019), but this time they came with some important lessons from their in-field experiences.&lt;/p&gt;
&lt;p&gt;For example, talking about garbage collection in R which happens once in a while and causes response times to lag. Can be avoided by manually calling the garbage collection with &lt;code&gt;gc()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;asynchronous-programming-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Asynchronous programming in R&lt;/h2&gt;
&lt;p&gt;Winston Chang demonstrating some ways for Asynchronous programming with the &lt;code&gt;later&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;An interesting thing he Winston demonstrated was that you can open up a server using &lt;code&gt;websocket&lt;/code&gt; and &lt;code&gt;httpuv&lt;/code&gt; to interact with the R process even if the rstudio console is busy (i.e., for example during a shiny app run).&lt;/p&gt;
&lt;p&gt;Materials of the talk will probably be available here &lt;a href=&#34;https://github.com/wch/2020-01-later&#34;&gt;https://github.com/wch/2020-01-later&lt;/a&gt;, though as of the time of writing these lines, the repo is empty. Maybe &lt;code&gt;later&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;of-teacups-giraffes-r-markdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Of Teacups, Giraffes, &amp;amp; R Markdown&lt;/h2&gt;
&lt;p&gt;A lovely and ispiring talk by Desiree De Lean, about how she (and a co-author) used a sort of Gamification to develop a statistics course. The course is based on the mysterious world of teacup Giraffes, and introduces statistical concepts with a nice and appealing twist.&lt;/p&gt;
&lt;p&gt;Another innovative approach this used was to combine &lt;code&gt;learnr&lt;/code&gt; iframes within the RMarkdown book they used, which makes the experience of the learner interactive. The &lt;code&gt;learnr&lt;/code&gt; segments are hosted in turn on shinyapps.io.&lt;/p&gt;
&lt;p&gt;The book is available online &lt;a href=&#34;https://tinystats.github.io/teacups-giraffes-and-statistics&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;styling-shiny-apps-with-saas-and-bootstrap-4&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Styling Shiny apps with Saas and Bootstrap 4&lt;/h2&gt;
&lt;p&gt;Joe Chang introduced the &lt;code&gt;bootstraplib&lt;/code&gt;package which provides much more flexibilty when composing your own theme for a shiny app. It takes away a lot of the pains related with CSS-ing your way aound the complexities of a shiny app UI.&lt;/p&gt;
&lt;p&gt;The package is still experimental, more info &lt;a href=&#34;https://rstudio.github.io/bootstraplib/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I talked to Joe Chang a bit, the package is not going to solve problems such as right-to-left localization for Hebrew.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;d-ggplots-with-rayshader&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3D ggplots with rayshader&lt;/h2&gt;
&lt;p&gt;A cool presentation by Tyler Morgan Wall author of the &lt;code&gt;rayshader&lt;/code&gt; package. Demonstrated how ggplot2 charts can be easily rendered into a 3d model.&lt;/p&gt;
&lt;p&gt;Mostly relevant for illustrating surfaces. The rayshader can be used to turn this plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;surface &amp;lt;- crossing(x = seq(0, 2*pi, pi/20), y = seq(0, 2*pi, pi/20)) %&amp;gt;% 
  mutate(z = sin(x)*x + cos(3*y))
surface_plot &amp;lt;- ggplot(surface, aes(x = x, y = y, fill = z)) + 
  geom_tile()
surface_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/post/2020-01-31-rstudio-conf2020-recap_files/figure-html/surface%20as%20a%20tile%20countour-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Projected as a 3d model using the rayshader here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rayshader::plot_gg(surface_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/media/rayshader_snap.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Tyler also demonstrated how you can generate a movie with the camera browsing around the chart. Beware, rendering takes long.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Obviously, there were many more notable talks at the conference, but this post was meant as a short list highlighting just a few.&lt;/p&gt;
&lt;p&gt;To sum up, the rstudio conf, was a great opportunity to meet up with collegues (old and new), brush up on some of the advanced and noval packages, see how the rstudio team is planning and seeing the future of RStudio and of the R ecosystem, and enjoy San Fransisco!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Confidence and prediction intervals explained... (with a Shiny app!)</title>
      <link>https://adisarid.github.io/post/2019-12-13-confidence_prediction_intervals_explained/</link>
      <pubDate>Fri, 13 Dec 2019 12:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2019-12-13-confidence_prediction_intervals_explained/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This semester I started teaching introduction to statistics and data analysis with R, at Tel-Aviv university.&lt;/p&gt;
&lt;p&gt;I put in a lot of efforts into bringing practical challenges, examples from real life, and a lot of demonstrations of statistical theory with R. This post is an example for how I’ve been using R code (and specifically Shiny apps) to demonstrate statistical theory, concepts and provide intuition.&lt;/p&gt;
&lt;div id=&#34;whats-the-difference-between-confidence-and-prediction-intervals&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What’s the difference between confidence and prediction intervals?&lt;/h2&gt;
&lt;p&gt;Last week I taught multiple linear regression, and I noticed that students have a hard time comprehending the difference between confidence intervals and prediction intervals. The former being an interval for the model (i.e., interval for the underlying model), and the latter being an interval for a noval observation.&lt;/p&gt;
&lt;p&gt;As the sample size increases, our uncertainty of the model’s parameters decreases, but the uncertainty in the value of a new observation, &lt;span class=&#34;math inline&#34;&gt;\(y_0\)&lt;/span&gt; is associated with variance of &lt;span class=&#34;math inline&#34;&gt;\(Y\)&lt;/span&gt; (the random variable from which &lt;span class=&#34;math inline&#34;&gt;\(y_0\)&lt;/span&gt; is drawn). Hence, it has a lower bound, based on that variance.&lt;/p&gt;
&lt;p&gt;In R, you can get a prediction or a confidence interval by using either&lt;/p&gt;
&lt;p&gt;&lt;code&gt;predict(object, newdata, interval = &#34;prediction&#34;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Or&lt;/p&gt;
&lt;p&gt;&lt;code&gt;predict(object, newdata, interval = &#34;confidence&#34;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For a prediction or for a confidence interval, respectively.&lt;/p&gt;
&lt;p&gt;To help me illustrate the differences between the two, I decided to build a small Shiny web app. It shows the differences between confidence intervals, prediction intervals, the regression fit, and the actual (original) model.&lt;/p&gt;
&lt;p&gt;The app is available &lt;a href=&#34;https://sarid.shinyapps.io/intervals_demo/&#34;&gt;here&lt;/a&gt;, and the source code is available on &lt;a href=&#34;https://github.com/adisarid/prediction_confidence_intervals_demo&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this app you can choose three types of models to demonstrate. Simple linear regression, and regression with a twist (&lt;span class=&#34;math inline&#34;&gt;\(\log\)&lt;/span&gt; transformation on the &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(\sin\)&lt;/span&gt; transformation on the &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linear model &lt;span class=&#34;math inline&#34;&gt;\(y = a + bx + \epsilon\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log-linear model &lt;span class=&#34;math inline&#34;&gt;\(\log(y)=a+bx+\epsilon\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sine &lt;span class=&#34;math inline&#34;&gt;\(y = a + b\sin(x) + \epsilon\)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the models are based on simple linear regression (&lt;code&gt;lm&lt;/code&gt; function), for the latter two models with either a &lt;code&gt;log&lt;/code&gt; or &lt;code&gt;sin&lt;/code&gt; transformation.&lt;/p&gt;
&lt;p&gt;The app allows you to play around with various values such as the &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; range, the model’s parameters (&lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(b\)&lt;/span&gt;), the error’s standard deviation (&lt;span class=&#34;math inline&#34;&gt;\(\epsilon\)&lt;/span&gt;), and show or hide any of the following elements, on the chart:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The original function (i.e., the original model)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The sampled points&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The confidence interval&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The prediction interval&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The model’s fit&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feel free to share the app or the app’s code. As mentioned above, the &lt;strong&gt;source code for the app&lt;/strong&gt; is available here: &lt;a href=&#34;https://github.com/adisarid/prediction_confidence_intervals_demo&#34;&gt;https://github.com/adisarid/prediction_confidence_intervals_demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s an example for what the app’s generating code and output looks like, for a model of the type &lt;span class=&#34;math inline&#34;&gt;\(\log(y) = 1 + \frac{x}{2} + \epsilon\)&lt;/span&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)

sample_size &amp;lt;- 90
x_range &amp;lt;- c(0, 1.5)
a &amp;lt;- 1
b &amp;lt;- 1.5
sigma &amp;lt;- 0.3

actual_function &amp;lt;- tibble(x = seq(x_range[1], x_range[2], by = 0.01)) %&amp;gt;% 
  mutate(actual_y = exp(a + b*x))

random_sample &amp;lt;- tibble(epsilon_err = rnorm(n = sample_size, 
                                            mean = 0,
                                            sd = sigma),
                        x = runif(n = sample_size,
                                  min = x_range[1],
                                  max = x_range[2])) %&amp;gt;% 
  mutate(sampled_y = exp(a + b*x + epsilon_err))

linear_model &amp;lt;- lm(formula = log(sampled_y) ~ x, data = random_sample)

prediction_i &amp;lt;- predict(object = linear_model,
                         newdata = actual_function,
                         interval = &amp;quot;prediction&amp;quot;) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  rename_at(vars(lwr,upr), ~paste0(., &amp;quot;_pi&amp;quot;)) %&amp;gt;% 
  mutate_all(exp)

confidence_i &amp;lt;- predict(object = linear_model,
                         newdata = actual_function,
                         interval = &amp;quot;confidence&amp;quot;) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  rename_at(vars(lwr,upr), ~paste0(., &amp;quot;_ci&amp;quot;)) %&amp;gt;% 
  select(-fit) %&amp;gt;% 
  mutate_all(exp)

intervals &amp;lt;- actual_function %&amp;gt;% 
  bind_cols(prediction_i,
            confidence_i)

ggplot() + 
  geom_line(data = actual_function, aes(x, actual_y, color = &amp;quot;Original Model&amp;quot;), size = 1) + 
  geom_point(data = random_sample, aes(x, sampled_y), alpha = 0.5) + 
  geom_line(data = intervals, 
            aes(x, fit, color = &amp;quot;Regression Fit&amp;quot;), size = 1) + 
  geom_line(data = intervals, 
            aes(x, lwr_pi, color = &amp;quot;Prediction Interval&amp;quot;), 
            linetype = 2, size = 1) +
  geom_line(data = intervals, 
            aes(x, upr_pi, color = &amp;quot;Prediction Interval&amp;quot;), 
            linetype = 2, size = 1) + 
  geom_line(data = intervals, 
            aes(x, lwr_ci, color = &amp;quot;Confidence Interval&amp;quot;), 
            linetype = 2, size = 1) + 
  geom_line(data = intervals, 
            aes(x, upr_ci, color = &amp;quot;Confidence Interval&amp;quot;), 
            linetype = 2, size = 1) + 
  theme_bw() + 
  xlab(&amp;quot;x&amp;quot;) + 
  ylab(&amp;quot;y&amp;quot;) + 
  ggtitle(&amp;quot;Log-linear: Model, Fit, Confidence and Prediction Intervals&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/post/2019-12-13-confidence_prediction_intervals_explained_files/figure-html/example%20for%20a%20log%20linear%20relationship-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Shiny apps are a great way to illustrate theoretical concepts, to provide intuition, and to let students experiment with parameters and see the outcomes. In this post I demonstrated how a Shiny app can be used to explain the concepts of a regression fit, confidence, and prediction intervals.&lt;/p&gt;
&lt;p&gt;If you used Shiny for interesting educational demonstrations I’d love to hear about it! feel free to share in the comments or message me on twitter &lt;span class=&#34;citation&#34;&gt;@SaridResearch&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Retrieving google drive item shares and permissions (in R)</title>
      <link>https://adisarid.github.io/post/2019-09-17-google_drive_dir_structure_permissions/</link>
      <pubDate>Tue, 17 Sep 2019 12:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2019-09-17-google_drive_dir_structure_permissions/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Google drive is a great tool, specifically we’ve been using “G Suite” (the equivalent of google drive but for businesses), for a long time. Lately I noticed it’s missing an important feature - monitoring file shares and permission of google drive items across organization is non-trival (at least in the G suite basic subscription).&lt;/p&gt;
&lt;p&gt;I wanted to get a better sense of how my files and folders are shared across users within and outside the organization. I decided to give the &lt;code&gt;googledrive&lt;/code&gt; package a try and extract the shares and permissions of important folders I had on my account. Here’s how I did that.&lt;/p&gt;
&lt;div id=&#34;using-googledrive-to-mass-extract-shares-and-permission-of-google-drive-items&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using &lt;code&gt;googledrive&lt;/code&gt; to mass extract shares and permission of google drive items&lt;/h2&gt;
&lt;p&gt;First, I wanted to focus on specific folders which contain a lot of subfolders. My goal was to generate a &lt;code&gt;tibble&lt;/code&gt; with the names of all sub-items (folder or files one level under the specific folders), along with all users which have access to these folders.&lt;/p&gt;
&lt;p&gt;Here is a description of what you need to do in order to accomplish what I described, followed by the code I used.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Get the id (or URL) for the folder you want to retrieve data from. You can get the id by just visiting the folder, and the id is in the URL, i.e., &lt;code&gt;https://drive.google.com/drive/u/1/folders/&amp;lt;HERE YOU WILL SEE THE FOLDER ID&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then, retrieve all items within the folder.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;purrr&lt;/code&gt; functions (i.e., &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;map_df&lt;/code&gt; to iterate over the results and bring them into a tidy form).&lt;/li&gt;
&lt;li&gt;(Optional) Use &lt;code&gt;pivot_wider&lt;/code&gt; to create a &lt;code&gt;tibble&lt;/code&gt; in a wide format where each row is an item and each column is the type of access each user has on the item.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first function I’m using is a function I defined called &lt;code&gt;get_permissions_df()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(googledrive)  # the package used to iterface with the google api

# Function to retrieve email addresses of permissions (read/write) --------

get_permissions_df &amp;lt;- function(permission_list){
  map_df(permission_list, ~{
    if (!is.null(.$emailAddress)){
      tibble(user_email = .$emailAddress, user_role = .$role)
    } else {
      tibble(user_email = NA, user_role = NA)
    }
  })
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function returns a tibble with two columns: user_email and user_role, according to the users with access to the folder (access can be owner/writer/reader).&lt;/p&gt;
&lt;p&gt;Now, to actually pulling the data and processing it:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Read the contents of the folder -----
# note that the first time you run this, you will be asked to login into your gmail using a web browser.
folder_contents &amp;lt;- drive_ls(as_id(&amp;quot;&amp;lt;FOLDER ID OR URL&amp;gt;&amp;quot;)) # replace here with the URL or ID of the folder.

# Get a tidy form of all shares and permissions of subfolders
tidy_permissions &amp;lt;- folder_contents %&amp;gt;% 
  mutate(new_creds = 
           map(drive_resource, 
                  ~{get_permissions_df(.$permissions)})
  ) %&amp;gt;% 
  select(name, new_creds) %&amp;gt;% 
  unnest(new_creds) %&amp;gt;% 
  filter(!is.na(user_email))

# Optional - turn into a wider form where each column is a user,
# each row is a subfolder, and values are permissions of users.

wide_permissions &amp;lt;- tidy_permissions %&amp;gt;% 
  distinct(name, user_email, .keep_all = T) %&amp;gt;% 
  pivot_wider(id_cols = name, 
              names_from = user_email, values_from = user_role, values_fill = list(user_role = &amp;quot;none&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There you have it: &lt;code&gt;tidy_permissions&lt;/code&gt; will hold the names of all subfolders with permissions. A folder will appear as many times as it has permissions (with the user email and the type of permission). The &lt;code&gt;wide_permissions&lt;/code&gt; will hold a wide version in which each row is a folder and each column is a user.&lt;/p&gt;
&lt;p&gt;Note that this works for specific folders. You can also use &lt;code&gt;drive_ls()&lt;/code&gt; without any arguments (or use it with &lt;code&gt;recursive=TRUE&lt;/code&gt;), to pull everything on the drive (or everything within all subfolders, recursively). When I did that it took me around 5-10 minutes to pull all the data and about 5 minutes to prepare it, since I have &lt;span class=&#34;math inline&#34;&gt;\(&amp;gt;100k\)&lt;/span&gt; items.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The post provides a method to create a concise tibble with the contents of you google drive items, and their user permissions.
You can either run it on all items in your google drive or on selected folders (and sub-folders within). The method is especially useful in the context of data safety and security, when you want to make sure you are not sharing sensitive items in an undesired manner.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Securing Shiny apps with AWS Cognito authentication</title>
      <link>https://adisarid.github.io/post/2019-08-10-cognito-shiny-authentication/</link>
      <pubDate>Fri, 30 Aug 2019 12:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2019-08-10-cognito-shiny-authentication/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;background&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Shiny apps are a great way to share information and empower your users. Sometimes you want to make sure that only authenticated and authorized users will be able to view your shiny apps.&lt;/p&gt;
&lt;p&gt;There are a number of ways to make sure only certain users have access to your apps. For example, you can subscribe to the professional plan in shinyapps.io which has this option built-in. You can program the authentication flow internally by yourself, or you just use a 3rd party service such as google firebase, AWS Cognito, Auth0, or others).&lt;/p&gt;
&lt;p&gt;The benefit of using a dedicated service is that you get a lot of features which will be a serious headake to program yourself, such as social logins, two factor authentication, logs, and user blocks on suspicious attempts (or warnings on unauthorized attempts, depending on settings).&lt;/p&gt;
&lt;p&gt;The down side is that it takes some time to implement. In this guide I aim to make the process as simple and painless as possible, using the Amazon Web Service’s authentication solution, called &lt;em&gt;AWS Cognito&lt;/em&gt;. But first, some theory about authentication.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;how-authentication-works&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;How authentication works&lt;/h2&gt;
&lt;p&gt;The logic behind authentication with AWS Cognito (or similar alternatives) is that you direct your users to a login page hosted by AWS, in which the user completes a process which confirms the user’s indentity. For example, by entering an e-mail and password, or by using a social sign-in (i.e., login via gmail, amazon, facebook). Then, once Cognito is finished, the user is redirected to your app with a URL variable which contain a specially issued code (i.e., &lt;code&gt;https://your-app-address/?code=AMAZON_ISSUED_CODE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, you use an http request (i.e., with package &lt;code&gt;httr&lt;/code&gt;) to query the Cognito API with this code, and in return you receive the information behind this code (i.e., the user’s &lt;em&gt;token&lt;/em&gt;, with information such as the name of the user, what is the user’s email, validity of the token, etc.). This &lt;code&gt;httr&lt;/code&gt; query is performed by using a password known only to you (i.e., only your app “knows” this password, this is not the user’s password).&lt;/p&gt;
&lt;p&gt;The code is usable only once, and the token is valid for a limited duration, to minimize the risk that an unauthorized party will hijack the token and re-use it to access your app.&lt;/p&gt;
&lt;p&gt;After authenticating the user, you can authorize the user according to privileges (which you would have to manage within your app, i.e. if the users email is X, then he can view Y).&lt;/p&gt;
&lt;p&gt;This process description was a very simplified, down-to-earth, nutshell description of oauth2. It might be inaccurate, but it will be enough for our goal here which is to actually implement it within a shiny app, integrating to Cognito. If you wish, you can find more information about oauth2 in detail &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s get to business.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-1-define-a-user-pool&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 1: Define a user pool&lt;/h2&gt;
&lt;p&gt;This step is actually performed within the AWS Console. Log into your AWS console and find the Cognito service.
Click on “Manage User Pools”, and then create a new user pool. The step-by-step wizard is pretty self explanatory, so I’ll focus on the important things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure that you require a relevant field upon your user sign-up which you can “count on” in order to perform user authorization within your app based on that field later on. I usually check the email address as a required field, and then add logic in my app which maps email addresses to what each user is allowed to view.&lt;/li&gt;
&lt;li&gt;Multi-factor authentication can be “off”, “optional” or “required”. If your app contains sensitive information, then you should consider making it required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; in the step where you are asked “Which app clients will have access to this user pool?” click on “Add an app client”. Give your app a name, the deafult options are sufficient so you shouldn’t change anything.&lt;/p&gt;
&lt;p&gt;Make sure you click on “Show Details” after you added your app and document the App client id and the App client secret. You will need them later on to interact with the Cognito API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/media/aws_app_info.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Optional&lt;/strong&gt;: right after you add your app and click “next step”, you will have a chance to add functions triggered by the various steps of the authentication flow. If you know what AWS Lambda functions are (and you defined such functions in your account) you can choose to trigger them depending on the authentication flow.&lt;/p&gt;
&lt;p&gt;Complete the wizard and create your user pool.&lt;/p&gt;
&lt;div id=&#34;email-communications&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Email communications&lt;/h3&gt;
&lt;p&gt;You must have the AWS SES (simple email service) configured properly, in order for the registration of new users and “forgot password” flows to work. By default, SES is in sandbox mode, which means you can only register users with pre-verified emails. Defining SES is outside the scope of this guide, but note that you have to open a ticket in the AWS support center, asking for these privilleges.&lt;/p&gt;
&lt;p&gt;Make sure you supply AWS support with a lot of information about how you make sure emails don’t bounce, and about spam prevention. Even though it’s trivial, since this is an internal AWS system using the email service, they made me jump through hoops, untill granting me a 50k daily email cap, which is more than enough for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;app-client-settings&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;App client settings&lt;/h3&gt;
&lt;p&gt;Under the “App integration -&amp;gt; App client settings” you need to add the Callback URL of your app (where the user is directed upon login). For example, if your app is going to be hosted on shinyapps.io that would be: &lt;code&gt;https://YOUR_USER_NAME.shinyapps.io/YOUR_APP_NAME&lt;/code&gt;. Your sign-out url can be the same, if you want the app to allow the user to restart the login, or a different page showing that the user has logged out.&lt;/p&gt;
&lt;p&gt;Under OAuth 2.0/“Allowed OAuth Flows” you should check the: &lt;em&gt;Authorization code grant&lt;/em&gt;. This is the authentication flow we are going to use for our shiny app. The “implicit grant” is not as secure, and the “client credentials” is used for machine-to-machine authentication.&lt;/p&gt;
&lt;p&gt;Under “Allowed OAuth Scopes” check the options by which you are going to recognize your users within the shiny app’s logic. I.e., if you are going to show specific data by the user’s email address than make sure you check the “email” under allowed OAuth scopes.&lt;/p&gt;
&lt;p&gt;Set a domain name for your login screen and customize the UI of the login screen if you wish.&lt;/p&gt;
&lt;p&gt;You can see in the following screenshot, that I’m using this authentication with one of my apps hosted in a shinyapps.io domain, under my account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/media/aws_app_client_settings.jpg&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;enable-identity-provides-optional&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Enable identity provides (Optional)&lt;/h3&gt;
&lt;p&gt;If you want to offer your users a social login such as Facebook or Google, you would need to issue the proper credentials via google console and facebook. This is a nice addition, but is out of the scope of this guide.&lt;/p&gt;
&lt;p&gt;Finally, we get into the R code part of this post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2-authorization-code-within-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 2: Authorization code (within R)&lt;/h2&gt;
&lt;p&gt;Now we need to add logic to our shiny app which will redirect the user to the AWS Cognito login page, and once the user authenticates and redirected to the shiny app, our shiny app will verify the token’s validity.&lt;/p&gt;
&lt;p&gt;Very basically, the Shiny app should read query url variables, and:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;If no variables appear, show a login button to the user (which will redirect to the AWS Cognito login screen with the proper parameters).&lt;/li&gt;
&lt;li&gt;If a url variable called &lt;code&gt;code&lt;/code&gt; appears, our app will read its value, and use AWS Cognito to apply a second layer of verification and identification according to the code (read the token issued by Cognito).&lt;/li&gt;
&lt;li&gt;If the user is logged on, show a “logout” button which will redirect the user into AWS Cognito logout link.&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;redirect-links-to-loginlogout-screen-authorization-logout-endpoints&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Redirect links to login/logout screen (AUTHORIZATION, LOGOUT Endpoints)&lt;/h3&gt;
&lt;p&gt;There are two “endpoints” (urls) that your users will be redirected to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;During their login flow into the app, or;&lt;/li&gt;
&lt;li&gt;After they click “logout”.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first is the “AUTHORIZATION Endpoint”. It is a redirection of the client to a url of the following form (I have already put it into a &lt;code&gt;paste0&lt;/code&gt; command, which we will later use in our app).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;base_cognito_url &amp;lt;- &amp;quot;https://YOUR_PREEDEFINED_AWS_COGNITO_DOMAIN.amazoncognito.com/&amp;quot;
app_client_id &amp;lt;- &amp;quot;YOUR_APP_CLIENT_ID&amp;quot;
app_client_secret &amp;lt;- &amp;quot;YOUR_APP_CLIENT_SECRET&amp;quot;
redirect_uri &amp;lt;- &amp;quot;https://YOUR_APP/redirect_uri&amp;quot; 
# e.g., if you are using shinyapps.io this would be: 
# https://ACCOUNT_NAME.shinyapps.io/YOUR_APP_NAME

aws_auth_redirect &amp;lt;-
  paste0(
    base_cognito_url,
    &amp;quot;oauth2/authorize?&amp;quot;,
    &amp;quot;response_type=code&amp;amp;&amp;quot;,
    &amp;quot;client_id=&amp;quot;, app_client_id, &amp;quot;&amp;amp;&amp;quot;,
    &amp;quot;redirect_uri=&amp;quot;, redirect_uri, &amp;quot;&amp;amp;&amp;quot;,
    &amp;quot;state=appredirect&amp;quot;
  )

aws_auth_redirect&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https://YOUR_PREEDEFINED_AWS_COGNITO_DOMAIN.amazoncognito.com/oauth2/authorize?response_type=code&amp;amp;client_id=YOUR_APP_CLIENT_ID&amp;amp;redirect_uri=https://YOUR_APP/redirect_uri&amp;amp;state=appredirect&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also specify the “scopes” (what information should Cognito hold for your next query, email, phone, etc.). If you don’t specify any scopes, all the information available on the user will be provided (see the next section of this post “&lt;strong&gt;Querying Cognito with the grant code&lt;/strong&gt;”).&lt;/p&gt;
&lt;p&gt;The second endpoint is the “LOGOUT Endpoint” which will logout the user. It is important to provide a logout button so that users can safely close your app, without worrying about other users in the same computer abusing their credentials.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;aws_auth_logout &amp;lt;-
  paste0(
    base_cognito_url, &amp;quot;logout?&amp;quot;,
    &amp;quot;client_id=&amp;quot;, app_client_id, &amp;quot;&amp;amp;&amp;quot;,
    &amp;quot;logout_uri=&amp;quot;, redirect_uri
  )

aws_auth_logout&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https://YOUR_PREEDEFINED_AWS_COGNITO_DOMAIN.amazoncognito.com/logout?client_id=YOUR_APP_CLIENT_ID&amp;amp;logout_uri=https://YOUR_APP/redirect_uri&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once a user has completed the login process (via the authorization endpoint), he will be redirected to your app (the link you provided in the redirect_uri and in the Cognito setup at step 1). If the login is successful, the user will return with a url variable called code, i.e. &lt;code&gt;https://YOUR_APP/redirect_uri?code=####-####-####-####&lt;/code&gt;. The next step will be to make sure that this code is indeed valid, and to check who is the user trying to access behind this code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;querying-cognito-with-the-grant-code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Querying Cognito with the grant code&lt;/h3&gt;
&lt;p&gt;This is a crucial part, in which we make sure that the user is indeed valid, and allowed to access your app. We’re going to use the &lt;code&gt;httr&lt;/code&gt; package for that.&lt;/p&gt;
&lt;p&gt;Let’s assume we have already pulled the authorization code from the Shiny app’s url variables (we’re going to show how to do that in step 3).&lt;/p&gt;
&lt;p&gt;We’re going to build a function which gets the code as an argument and provides the user’s information (or an error if the user is not authenticated or there was a different failure). I usually place this code in my &lt;code&gt;global.r&lt;/code&gt; file, which is a part of the shiny app’s bundle (&lt;code&gt;ui.r&lt;/code&gt;, &lt;code&gt;server.r&lt;/code&gt;, &lt;code&gt;global.r&lt;/code&gt;), and is used to define an environment variables and functions which will be availble to the shiny app. You can also place it at the begining of the &lt;code&gt;server.r&lt;/code&gt; if you don’t want a &lt;code&gt;global.r&lt;/code&gt; file. If you are using a single &lt;code&gt;app.r&lt;/code&gt; just put it before the app itself.&lt;/p&gt;
&lt;p&gt;Here is the code that goes into your &lt;code&gt;global.r&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;base_cognito_url &amp;lt;- &amp;quot;https://YOUR_DOMAIN.YOUR_AMAZON_REGION.amazoncognito.com/&amp;quot;
app_client_id &amp;lt;- &amp;quot;YOUR_APP_CLIENT_ID&amp;quot;
app_client_secret &amp;lt;- &amp;quot;YOUR_APP_CLIENT_SECRET&amp;quot;
redirect_uri &amp;lt;- &amp;quot;https://YOUR_APP/redirect_uri&amp;quot;

library(httr)

app &amp;lt;- oauth_app(appname = &amp;quot;my_shiny_app&amp;quot;,
                 key = app_client_id,
                 secret = app_client_secret,
                 redirect_uri = redirect_uri)
cognito &amp;lt;- oauth_endpoint(authorize = &amp;quot;authorize&amp;quot;,
                          access = &amp;quot;token&amp;quot;,
                          base_url = paste0(base_cognito_url, &amp;quot;oauth2&amp;quot;))


retrieve_user_data &amp;lt;- function(user_code){
  
  failed_token &amp;lt;- FALSE
  
  # get the token
  tryCatch({token_res &amp;lt;- oauth2.0_access_token(endpoint = cognito,
                                              app = app,
                                              code = user_code,
                                              user_params = list(client_id = app_client_id,
                                                                 grant_type = &amp;quot;authorization_code&amp;quot;),
                                              use_basic_auth = TRUE)},
           error = function(e){failed_token &amp;lt;&amp;lt;- TRUE})
  
  # check result status, make sure token is valid and that the process did not fail
  if (failed_token) {
    return(NULL)
  }
  
  # The token did not fail, go ahead and use the token to retrieve user information
  user_information &amp;lt;- GET(url = paste0(base_cognito_url, &amp;quot;oauth2/userInfo&amp;quot;), 
                          add_headers(Authorization = paste(&amp;quot;Bearer&amp;quot;, token_res$access_token)))
  
  return(content(user_information))
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3-define-your-shiny-apps-server.r-and-ui.r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 3: define your Shiny app’s &lt;code&gt;server.r&lt;/code&gt; and &lt;code&gt;ui.r&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In our shiny app, we need to pull the code and use the &lt;code&gt;retrieve_user_data&lt;/code&gt; function we’ve just defined as part of our verification of the user. Here is the code we will use for this. This should go into the &lt;code&gt;server.r&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(shiny)
library(shinyjs)

# define a tibble of allwed users (this can also be read from a local file or from a database)
allowed_users &amp;lt;- tibble(
  user_email = c(&amp;quot;user1@example.com&amp;quot;,
                 &amp;quot;user2@example.com&amp;quot;))

function(input, output, session){
   
   # initialize authenticated reactive values ----
   # In addition to these three (auth, name, email)
   # you can add additional reactive values here, if you want them to be based on the user which logged on, e.g. privileges.
   user &amp;lt;- reactiveValues(auth = FALSE, # is the user authenticated or not
                          name = NULL, # user&amp;#39;s name as stored and returned by cognito
                          email = NULL)  # user&amp;#39;s email as stored and returned by cognito
   
   # get the url variables ----
   observe({
        query &amp;lt;- parseQueryString(session$clientData$url_search)
        if (!(&amp;quot;code&amp;quot; %in% names(query))){
            # no code in the url variables means the user hasn&amp;#39;t logged in yet
            showElement(&amp;quot;login&amp;quot;)
        } else {
            current_user &amp;lt;- retrieve_user_data(query$code)
            # if an error occurred during login
            if (is.null(current_user)){
                hideElement(&amp;quot;login&amp;quot;)
                showElement(&amp;quot;login_error_aws_flow&amp;quot;)
                showElement(&amp;quot;submit_sign_out_div&amp;quot;)
                user$auth &amp;lt;- FALSE
            } else {
                # check if user is in allowed user list
                # for more robustness, use stringr::str_to_lower to avoid case sensitivity
                # i.e., (str_to_lower(current_user$email) %in% str_to_lower(allowed_users$user_email))
                if (current_user$email %in% allowed_users$user_email){
                    hideElement(&amp;quot;login&amp;quot;)
                    showElement(&amp;quot;login_confirmed&amp;quot;)
                    showElement(&amp;quot;submit_sign_out_div&amp;quot;)
                    
                    user$auth &amp;lt;- TRUE
                    user$email &amp;lt;- current_user$email
                    user$name &amp;lt;- current_user$name
                    
                    # ==== User is valid, continue prep ====
                    
                    # show the welcome box with user name
                    output$confirmed_login_name &amp;lt;-
                        renderText({
                            paste0(&amp;quot;Hi there!, &amp;quot;,
                                    user$name)
                        })
                    
                    # ==== Put additional login dependent steps here (e.g. db read from source) ====
                    
                    # ADD HERE YOUR REQUIRED LOGIC
                    # I personally like to select the first tab for the user to see, i.e.:
                    showTab(&amp;quot;main_navigation&amp;quot;, &amp;quot;content_tab_id&amp;quot;, select = TRUE) 
                    # (see the next chunk for how this tab is defined in terms of ui elements)
                    
                    # ==== Finish loading and go to tab ====
                    
                } else {
                    # user not allowed. Only show sign-out, perhaps also show a login error message.
                    hideElement(&amp;quot;login&amp;quot;)
                    showElement(&amp;quot;login_error_user&amp;quot;)
                    showElement(&amp;quot;submit_sign_out_div&amp;quot;)
                }
            }
        }
    })
   
   # This is where you will put your actual elements (the server side that is) ----
   # For example:
    
    output$some_plot &amp;lt;- renderPlot({
        # *** THIS IS EXTREMELY IMPORTANT!!! ***
        validate(need(user$auth, &amp;quot;No privileges to watch data. Please contact support.&amp;quot;))
        # since shinyjs is not safe for hiding content, make sure that any information is covered
        # by the validate(...) expression as was specified. 
        # Rendered elements which were not preceded by a validate expression can be viewed in the html code (even if you use hideElement).
        
        # only if user is confirmed the information will render (a plot in this case)
        plot(cars)
    })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The accompanying user interface (&lt;code&gt;ui.r&lt;/code&gt;) will look like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
library(shiny)
library(shinyjs)

fluidPage(
    useShinyjs(), # to enable the show/hide of elements such as login and buttons
    hidden( # this is how the logout button will like:
        div(
            id = &amp;quot;submit_sign_out_div&amp;quot;,
            a(id = &amp;quot;submit_sign_out&amp;quot;,
              &amp;quot;logout&amp;quot;,
              href = aws_auth_logout,
              style = &amp;quot;color: black; 
              -webkit-appearance: button; 
              -moz-appearance: button; 
              appearance: button; 
              text-decoration: none; 
              background:#ff9999; 
              position: absolute; 
              top: 0px; left: 20px; 
              z-index: 10000;
              padding: 5px 10px 5px 10px;&amp;quot;
              )
            )
    ),
    navbarPage(
        &amp;quot;Cognito auth example&amp;quot;,
        id = &amp;quot;main_navigation&amp;quot;,
        tabPanel(
            &amp;quot;identification&amp;quot;,
            value = &amp;quot;login_tab_id&amp;quot;,
            h1(&amp;quot;Login&amp;quot;),
            div(
                id = &amp;quot;login&amp;quot;,
                p(&amp;quot;To login you must identify with a username and password&amp;quot;),
                # This defines a login button which upon click will redirect to the AWS Cognito login page
                a(id = &amp;quot;login_link&amp;quot;,
                  &amp;quot;Click here to login&amp;quot;,
                  href = aws_auth_redirect,
                  style = &amp;quot;color: black;
                  -webkit-appearance: button;
                  -moz-appearance: button;
                  appearance: button;
                  text-decoration: none;
                  background:#95c5ff;
                  padding: 5px 10px 5px 10px;&amp;quot;)
            ),
            hidden(div(
                id = &amp;quot;login_error_aws_flow&amp;quot;,
                p(&amp;quot;An error has occurred.&amp;quot;),
                p(&amp;quot;Please contact support&amp;quot;)
            )),
            hidden(
                div(
                    id = &amp;quot;login_confirmed&amp;quot;,
                    h3(&amp;quot;User confirmed&amp;quot;),
                    fluidRow(
                        textOutput(&amp;quot;confirmed_login_name&amp;quot;)),
                    fluidRow(
                        p(&amp;quot;Use the menu bar to navigate.&amp;quot;),
                        p(
                            &amp;quot;Don&amp;#39;t forget to logout when you want to close the system.&amp;quot;
                        )
                    )
                )
            ),
        ),
        tabPanel(&amp;quot;Your actual content&amp;quot;, 
                 value = &amp;quot;content_tab_id&amp;quot;,
                 fluidRow(plotOutput(&amp;quot;some_plot&amp;quot;)))
    )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The post contains essential things you need in order to get started with AWS Cognito authentication for your shiny apps.&lt;/p&gt;
&lt;p&gt;You can extend this process to any authentication service (for example, digital ocean has a similar service to Cognito). There are some packages which implement the entire process for other services, like &lt;code&gt;googleAuthR&lt;/code&gt; for a gmail login &lt;a href=&#34;https://code.markedmondson.me/googleAuthR/articles/google-authentication-types.html&#34;&gt;see this link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you found this post useful, let me know!, either in comments below, or twitter, or email.&lt;/p&gt;
&lt;p&gt;As always, be careful of how you implement this process in your own apps, to make sure there are no security risks or loopholes. Also, DISCLAIMER: The information in this post is free, you can use this however like. Note that it is published with the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>What NOT to do when building a shiny app (lessons learned the hard way)</title>
      <link>https://adisarid.github.io/post/2019-07-03-shiny_app_lessons/</link>
      <pubDate>Fri, 19 Jul 2019 12:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2019-07-03-shiny_app_lessons/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I’ve been building R shiny apps for a while now, and ever since I started working with shiny, it has significantly increased the set of services I offer my clients.&lt;/p&gt;
&lt;p&gt;Here’s a documentations of some of the many lessons I learned in previous projects I did. Hopefully, others can avoid them in the future.&lt;/p&gt;
&lt;div id=&#34;background&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Shiny is a really great tool that allows data scientists to communicate their analysis in an appealing and an effective way. However, as data scientists we are used to thinking about things a certain way. Our way of thinking, and our practices are different than these of a software developer or a DevOps.&lt;/p&gt;
&lt;p&gt;Here are some of things I learned along the path of my Shiny app developing experiences - some things that you should and should not do.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dont-skip-the-planning-phase&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Don’t skip the planning phase&lt;/h2&gt;
&lt;p&gt;Do a mockup, research your implementation options.&lt;/p&gt;
&lt;div id=&#34;mockup&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Mockup&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Do a mockup&lt;/strong&gt;, even if it’s just a piece of paper which took you 5 minutes to draw. It will be worth it.&lt;/p&gt;
&lt;p&gt;Shiny is very tempting in the sense that once you understand the concept of reactive programming, you can go from idea to a full app in a few days work. Why invest time in preparing a mockup or planning, when you can just go ahead and do the actual thing?&lt;/p&gt;
&lt;p&gt;My experience tells me that the app is much more successful in capturing the customer’s needs, when he’s a part of the technical planning phase (when you share your dillemas with the client). It sets expectations, frames what you can and can’t (or won’t) do for the customer, and enables you to find solutions together.&lt;/p&gt;
&lt;p&gt;Also, when you’re looking at a mockup (even if it’s just a simple drawing or a non-interactive slide), it helps in the next stages of building the app’s UI.&lt;/p&gt;
&lt;p&gt;Here is an example of how a mockup would look like when I’m drawing it on a piece of paper. Note how I’ve already written down the purpose of some of the elements and their expeted element ids. It helps building the UI when you’re actually looking at one of these.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://adisarid.github.io/media/mockup_draw_example.jpg&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Example for a mockup drawing&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;research&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Research&lt;/h3&gt;
&lt;p&gt;When you encounter a requirement you did not encounter before, and wondering about how to accomplish it, research.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is there more than a single way to accomplish what you’re trying?&lt;/li&gt;
&lt;li&gt;What are the pros and cons of each method?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, when I needed to show a table and incorporate data intake into the table, I was researching two options, one with the &lt;code&gt;DataTable&lt;/code&gt; package (via the &lt;code&gt;editable=TRUE&lt;/code&gt; argument) and the other is the &lt;code&gt;rhandsontable&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;Both provide data editing, eventually I chose &lt;code&gt;randsontable&lt;/code&gt; which had some limitations (e.g., slower rendering than &lt;code&gt;DataTable&lt;/code&gt;, no search box), but provided more features out-of-the-box (e.g., data validation displaying factors as a list, checkboxes, etc.).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;be-sure-you-can-live-up-to-your-promises&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Be sure you can live up to your promises&lt;/h2&gt;
&lt;p&gt;This is more of a broad issue (you can say its true for anything).&lt;/p&gt;
&lt;p&gt;In my case, in the past I promised some clients I’ll provide “realtime” dashboards. However, as it turned out, I was reading from a csv data dump which provided the data with delays going up to 15-30 minutes.&lt;/p&gt;
&lt;p&gt;In most projects I do, 15 minutes and realtime are pretty much equivalent from a practical standpoint, but in a specific project I did recently, I had a client which wanted to check the data as it was changing minute-by-minute.&lt;/p&gt;
&lt;p&gt;This gap in expectations caused some confusion and dissappointment. We eventually learned from this, and in the future, when realtime is a requirement, we will use a better data source (i.e., data base instead of the delayed data dump).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dont-forget-to-plan-your-budget&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Don’t forget to plan your budget&lt;/h2&gt;
&lt;p&gt;Make sure you consider all the elements you need for the project. Plan the budget accordingly, and understand the ramifications of scaling the app.&lt;/p&gt;
&lt;p&gt;For example, if you’re using shinyapps.io, get familiar with the pricing packages, figure out what will you need to provide a good SLA (relative to the number of users of the app).&lt;/p&gt;
&lt;p&gt;Same goes for other cloud services, e.g., using a data base - how many users? how many connections? size of data base?&lt;/p&gt;
&lt;p&gt;In most cloud providers you can also set up &lt;strong&gt;billing alerts&lt;/strong&gt; which lets you know when something is exceeding a predetermined threshold.&lt;/p&gt;
&lt;p&gt;All of these are very important when you’re building your quote, and obviously when going into production with your App.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dont-skip-testing-and-staging-on-your-way-to-production&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Don’t skip testing and staging on your way to production&lt;/h2&gt;
&lt;p&gt;In software development there are various levels of environments, starting from your desktop (“local”), through development server, integration, testing, staging/acceptance, and production. See Wikipedia’s &lt;a href=&#34;https://en.wikipedia.org/wiki/Deployment_environment&#34;&gt;Deployment environment&lt;/a&gt; entry.&lt;/p&gt;
&lt;p&gt;When building an app, make sure you go through these steps. Specifically relating to testing, staging, and production). What I found to be particularly useful is to upload the app twice (in two seperate locations/urls):&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Deploy as a beta app (client acceptance/demo) in which I demonstrate additional features and discuss them with the client, before incorporating them into production.&lt;/li&gt;
&lt;li&gt;Deploy as a production/live app.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you iterate and improve the app, fix bugs, and add new features, you are also at the risk of breaking things. Thus, you should first update the beta app, share the new additions, and let the client experiment with the app. This way you can double check you didn’t break anything else.&lt;/p&gt;
&lt;p&gt;Only when the client authorizes the corrections, redeploy the new app to the production.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;As data scientists using Shiny, we’ve also become software developers. We’re developing not just for ourselves or for other useRs in our community.&lt;/p&gt;
&lt;p&gt;With Shiny we’re building for end-users. We’re building customer facing apps, and we need to keep that in mind. We should make sure that we adopt and use best practices of software development.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Test your tidyness - a short quiz to check your tidyverse capabilities</title>
      <link>https://adisarid.github.io/post/2019-04-28-test_your_tidyness/</link>
      <pubDate>Sun, 28 Apr 2019 12:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2019-04-28-test_your_tidyness/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Over the last month I gave a tidyverse + intro to data science corporate training in a startup in Tel-Aviv. We had two groups (beginners and intermediates), and for the last assignment of the course I was aiming for a short quiz comprised of various topics which we covered during the course, such that can also be automated easily (i.e., multiple choice questions).&lt;/p&gt;
&lt;p&gt;I came up with the following quiz, which I thought would be nice to share here. I guess that experts should probably be able to complete this in a few minutes, intermediate/beginners would probably complete this by up to 30 minutes.&lt;/p&gt;
&lt;div id=&#34;exam-instructions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exam instructions&lt;/h2&gt;
&lt;p&gt;The following exam contains 10 questions which spans across the different topics regaring tidyverse, and some analysis dilemmas. Each question has four options but only one correct answer. Each correct answer provides you with 10 points.&lt;/p&gt;
&lt;p&gt;You can use any materials you want including but not limited to: cheat sheets, our course materials, stack overflow, package documentation, running code and seeing what it does.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;question-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question 1:&lt;/h2&gt;
&lt;p&gt;When would you use an R markdown file (.Rmd) versus a script file (.R) to save your work?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;If I want the relative position of the file retained (so that it is easier to load files from the same directory), I will use an .Rmd file, otherwise I will use a .R file.&lt;/li&gt;
&lt;li&gt;When I want a complete documentation of my work in a report I will use a .Rmd. I will use a .R file for debugging and sourcing functions.&lt;/li&gt;
&lt;li&gt;There is no significant difference between the two formats, and they can be used for the same things interchangably.&lt;/li&gt;
&lt;li&gt;There is no benefit to using .R script files, the .Rmd format is always superior.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;question-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question 2:&lt;/h2&gt;
&lt;p&gt;Look at the following segments of code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# segment 1:
new_data &amp;lt;- read.csv(&amp;quot;myfilename.csv&amp;quot;)

# segment 2:
new_data %&amp;gt;% 
   group_by(some_cool_suff) %&amp;gt;% 
   summarize(average = mean(avg_me, na.rm = T)) -&amp;gt; updated_df
   
# segment 3:
avg_var &amp;lt;- mean(new_data$avg_me[!is.na(some_cool_stuff)], na.rm = T)
   
# segment 4:
data.frame(a = 1:10, b = letters[1:10]) %&amp;gt;% 
   sample_n(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which segments would you classify as &lt;code&gt;tidyverse&lt;/code&gt; syntax?
(&lt;code&gt;tidyverse&lt;/code&gt; syntax = code which uses functions from tidyverse packages, in which there is no function that you can replace to a &lt;code&gt;tidyverse&lt;/code&gt; equivalent)&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;Segment 1 and segment 3.&lt;/li&gt;
&lt;li&gt;Segment 2 and segment 4.&lt;/li&gt;
&lt;li&gt;Segment 4.&lt;/li&gt;
&lt;li&gt;Segment 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;question-3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question 3:&lt;/h2&gt;
&lt;p&gt;What &lt;code&gt;ggplot2&lt;/code&gt; geoms would you use to generate the following charts?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;Figure 1: not generated with &lt;code&gt;ggplot2&lt;/code&gt;, Figure 2: &lt;code&gt;geom_point&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Figure 1: &lt;code&gt;geom_boxplot&lt;/code&gt;, Figure 2: &lt;code&gt;geom_line&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Figure 1: &lt;code&gt;geom_violin&lt;/code&gt;, Figure 2: &lt;code&gt;geom_point&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Figure 1: &lt;code&gt;geom_boxplot&lt;/code&gt;, Figure 2: &lt;code&gt;geom_point&lt;/code&gt; + &lt;code&gt;geom_line&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/post/2019-04-28-Test_your_tidyness_files/figure-html/ggplot2%20challege-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula &amp;#39;y ~ x&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/post/2019-04-28-Test_your_tidyness_files/figure-html/ggplot2%20challege-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;question-4&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question 4:&lt;/h2&gt;
&lt;p&gt;What is the difference between the &lt;code&gt;matrix&lt;/code&gt; and the &lt;code&gt;tibble&lt;/code&gt; in the following?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;matrix(cbind(1:10, letters[1:10], LETTERS[1:10]), ncol = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       [,1] [,2] [,3]
##  [1,] &amp;quot;1&amp;quot;  &amp;quot;a&amp;quot;  &amp;quot;A&amp;quot; 
##  [2,] &amp;quot;2&amp;quot;  &amp;quot;b&amp;quot;  &amp;quot;B&amp;quot; 
##  [3,] &amp;quot;3&amp;quot;  &amp;quot;c&amp;quot;  &amp;quot;C&amp;quot; 
##  [4,] &amp;quot;4&amp;quot;  &amp;quot;d&amp;quot;  &amp;quot;D&amp;quot; 
##  [5,] &amp;quot;5&amp;quot;  &amp;quot;e&amp;quot;  &amp;quot;E&amp;quot; 
##  [6,] &amp;quot;6&amp;quot;  &amp;quot;f&amp;quot;  &amp;quot;F&amp;quot; 
##  [7,] &amp;quot;7&amp;quot;  &amp;quot;g&amp;quot;  &amp;quot;G&amp;quot; 
##  [8,] &amp;quot;8&amp;quot;  &amp;quot;h&amp;quot;  &amp;quot;H&amp;quot; 
##  [9,] &amp;quot;9&amp;quot;  &amp;quot;i&amp;quot;  &amp;quot;I&amp;quot; 
## [10,] &amp;quot;10&amp;quot; &amp;quot;j&amp;quot;  &amp;quot;J&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble(num = 1:10, sl = letters[1:10], cl = LETTERS[1:10])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
##      num sl    cl   
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
##  1     1 a     A    
##  2     2 b     B    
##  3     3 c     C    
##  4     4 d     D    
##  5     5 e     E    
##  6     6 f     F    
##  7     7 g     G    
##  8     8 h     H    
##  9     9 i     I    
## 10    10 j     J&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;The tibble has named variables (columns) and the matrix does not name the columns.&lt;/li&gt;
&lt;li&gt;The tibble retains the original data type and the matrix converts the data types.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matrix&lt;/code&gt; is a base R function and &lt;code&gt;tibble&lt;/code&gt; is a tidyverse function.&lt;/li&gt;
&lt;li&gt;All of the above.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;question-5&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question 5:&lt;/h2&gt;
&lt;p&gt;What &lt;code&gt;stringr&lt;/code&gt; function would you use to simplify the following code?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;some_string &amp;lt;- c(&amp;quot;How are you today?&amp;quot;, &amp;quot;Is this test ok?&amp;quot;, &amp;quot;You&amp;#39;re already half way in!&amp;quot;)
map_chr(some_string, ~paste0(stringi::stri_wrap(., width = 5), collapse = &amp;quot;\n&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;&lt;code&gt;str_count&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_wrap&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_sub&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;No such function: must use a combination of a &lt;code&gt;stringr&lt;/code&gt; and a loop (or a &lt;code&gt;map&lt;/code&gt; function).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;question-6&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question 6:&lt;/h2&gt;
&lt;p&gt;What is the difference between &lt;code&gt;contains&lt;/code&gt; and &lt;code&gt;one_of&lt;/code&gt;?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;Both are “select helpers”, &lt;code&gt;one_of&lt;/code&gt; is used to specify strings which starts with one of the specified expressions, and &lt;code&gt;contains&lt;/code&gt; lets you specify the variable names in “non standard evaluation” (unquoted) style.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contains&lt;/code&gt; selects variables based on the regular expression you feed as an argument. &lt;code&gt;one_of&lt;/code&gt; needs you to specify the variable names as strings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contains&lt;/code&gt; selects variables which contain the literal string you feed into it. &lt;code&gt;one_of&lt;/code&gt; needs you to specify the variables names as strings.&lt;/li&gt;
&lt;li&gt;Both functions do the same thing with the same arguments.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;question-7&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question 7:&lt;/h2&gt;
&lt;p&gt;When reshaping data with the &lt;code&gt;gather&lt;/code&gt; function, what is the meaning of the &lt;code&gt;...&lt;/code&gt; argument?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;Specify which variables to gather by.&lt;/li&gt;
&lt;li&gt;Specify which variables &lt;strong&gt;not&lt;/strong&gt; to gather by (using the “-” sign).&lt;/li&gt;
&lt;li&gt;Specify either &lt;em&gt;a&lt;/em&gt; or &lt;em&gt;b&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Provide variable by which to group the resulting tibble.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;question-8&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question 8:&lt;/h2&gt;
&lt;p&gt;What function would you use to get all the rows in &lt;code&gt;tibble1&lt;/code&gt; which are not in &lt;code&gt;tibble2&lt;/code&gt;?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;&lt;code&gt;setdiff(tibble1, tibble2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setdiff(tibble2, tibble1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersect(tibble1, tibble2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semi_join(tibble1, tibble2)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;question-9&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question 9:&lt;/h2&gt;
&lt;p&gt;Assume you examine the data which appears in the following scatter plot using per-axis boxplots. Would classify point A as an outlier?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;Yes, only accoring to the y-axis.&lt;/li&gt;
&lt;li&gt;Yes, only according to the x-axis.&lt;/li&gt;
&lt;li&gt;Yes, according to either x-axis or y-axis.&lt;/li&gt;
&lt;li&gt;No, it will not be classified as an outlier.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/post/2019-04-28-Test_your_tidyness_files/figure-html/outlier%20question-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;question-10&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question 10:&lt;/h2&gt;
&lt;p&gt;You encountered a data set in which all variables are normally distributed with an unequal variance and
unequal expectancy (mean). You wish to run a KMeans clustering to cluster the data. What would you do
as a preprocessing step?&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;Scale and center the data using the function scale.&lt;/li&gt;
&lt;li&gt;Scale and center the data using min-max scaling and centering.&lt;/li&gt;
&lt;li&gt;Either a or b.&lt;/li&gt;
&lt;li&gt;Nothing - since the data is already normally distributed, no scaling or centering is required.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;bonus-question-5-points-bonus&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bonus question (5 points bonus):&lt;/h2&gt;
&lt;p&gt;Did you sign up for &lt;a href=&#34;https://www.r-bloggers.com&#34;&gt;R-Bloggers&lt;/a&gt; updates? (feed to receive R related news and updates)&lt;/p&gt;
&lt;ol style=&#34;list-style-type: lower-alpha&#34;&gt;
&lt;li&gt;Yes (5 points bonus).&lt;/li&gt;
&lt;li&gt;No, but I’m doing it now (2.5 points bonus).&lt;/li&gt;
&lt;li&gt;No, and I don’t intend to.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;P.S. I’m not getting any benefits from R-bloggers for “advertising” them, I genuinly think it’s a great source to stay updated, and improve your R capabilities.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;quiz-answers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Quiz answers&lt;/h2&gt;
&lt;p&gt;Answers available &lt;a href=&#34;https://gist.github.com/adisarid/6c7dbd38b5da09e0de99b90aa8300403&#34;&gt;in the following gist&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The teachR&#39;s::cheat sheet</title>
      <link>https://adisarid.github.io/post/2019-03-12-the_teachr_cheat_sheet/</link>
      <pubDate>Tue, 12 Mar 2019 12:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2019-03-12-the_teachr_cheat_sheet/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;A few months ago I attended the 2019 rstudio::conf, including the shiny train-the-trainer workshop. It was a two day workshop and it inspired me in many ways. The first day of the workshop focused on the very basics of teaching (R or anything else), and for me it put the spotlight on things I never considered before.&lt;/p&gt;
&lt;p&gt;One of the important takeways from the workshop was how to approach educating others: preparing for a course, things you can do during the lessons, and how to self-learn and improve my own teaching methods afterwards.&lt;/p&gt;
&lt;p&gt;This led me to create the teachR’s cheatsheet. It outlines the basics of teaching and I chose to give it the flavour of R (in the examples and illustrations within the cheatsheet).&lt;/p&gt;
&lt;p&gt;I have contributed it to RStudio’s cheat sheet repo, so you can download it directly from: &lt;a href=&#34;https://github.com/rstudio/cheatsheets/raw/master/teachR.pdf&#34; class=&#34;uri&#34;&gt;https://github.com/rstudio/cheatsheets/raw/master/teachR.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the cheat sheet you will find three segments:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Preparing a new course / workshop / lesson.&lt;/li&gt;
&lt;li&gt;Things you can do during the lesson itself.&lt;/li&gt;
&lt;li&gt;Things you should do when the course is completed in order to improve your own teaching methods.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I previously blogged about some of the things learned at the train-the-trainer, and not everything made it to the cheat sheet, so if you’re interested you can read more &lt;a href=&#34;https://adisarid.github.io/post/2019-01-19-rstudio-conf-recap/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s an example for some of the things you can find in the cheat sheet.&lt;/p&gt;
&lt;div id=&#34;designing-a-new-course&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Designing a new course&lt;/h2&gt;
&lt;p&gt;The cheat sheet covers the various steps of designing a course, i.e.:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Persona analysis of your learners.&lt;/li&gt;
&lt;li&gt;Defining the course’s goals using Bloom’s taxonomy.&lt;/li&gt;
&lt;li&gt;Using conceptual maps to grasp what the the course should look like and what related terms/materials should appear.&lt;/li&gt;
&lt;li&gt;Writing the final exam, the slides, check-ins and faded examples.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are some examples relating to 1-2:&lt;/p&gt;
&lt;div id=&#34;persona-analysis&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Persona analysis&lt;/h3&gt;
&lt;p&gt;Take a while to understand and characterize your learners: are the novice? advanced? false experts?&lt;/p&gt;
&lt;p&gt;What are the learner’s goals from the course? what prior knowledge you can assume (and what not), and do they have any special needs.&lt;/p&gt;
&lt;p&gt;If end up with too many personas anticipate trouble - it’s hard to accomodate a diverse crowd, what are you going to miss out on?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;define-goals-using-blooms-taxonomy&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Define goals using Bloom’s taxonomy&lt;/h3&gt;
&lt;p&gt;Bloom’s taxonomy illustrates the levels of learning new concepts or topics.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://wp0.vanderbilt.edu/cft/guides-sub-pages/blooms-taxonomy/&#34;&gt;Vanderbilt University Center for Teaching&lt;/a&gt; has a nice illustration for it.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://adisarid.github.io/media/blooms_taxonomy.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Blooms Taxonomy&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You can visit the Vanderbilt website for a more thorough explanation about the taxonomy, but suffice it to say that “remember” is the most basic form of acquired knowledge, and the highest levels (at the top of the pyramid) are evaluate and create (being able to evaluate someone else’s work, or create your own noval work).&lt;/p&gt;
&lt;p&gt;If we translate that to R, “remember” might translate to: “learners will be able to state the main packages in &lt;code&gt;tidyverse&lt;/code&gt; and their purpose” versus “create” which in that context would translate to: “learners will be able to contribute to a &lt;code&gt;tidyverse&lt;/code&gt; packages or create their own tidy package.” You can see that the first is something you can teach an R beginner but the latter is much more complex and can be mastered by an advanced useR.&lt;/p&gt;
&lt;p&gt;Working with Bloom’s taxonomy can help you set your goals for the course and also help you set the expectations with the learners of your course.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;during-the-course&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;During the course&lt;/h2&gt;
&lt;p&gt;Some tips I learned at the train-the-trainer workshop, for when you are during the lesson itself.&lt;/p&gt;
&lt;div id=&#34;sticky-notes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sticky notes&lt;/h3&gt;
&lt;p&gt;At the start of the lesson, give each learner three sticky notes (green, red, and blue).
The learners put them on their computers according to their progress:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Green = I’m doing fine / finished teh exercise.&lt;/li&gt;
&lt;li&gt;Red = Something is wrong, I need help.&lt;/li&gt;
&lt;li&gt;Blue = I need a break&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you see a lot of greens - try to up the pace. If you see a lot of reds, maybe take it easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;check-ins&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Check-ins&lt;/h3&gt;
&lt;p&gt;Try to set a few check-ins every hour, to evaluate the progress and make sure that the learners are “with you”. You can even use some kind of online surveying tool to turn this into a “game”.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;after-the-course&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;After the course&lt;/h2&gt;
&lt;p&gt;Make sure you debrief properly, and learn from your experience. Use surveys to collect feedback. Also measure the time each chapter really takes you, so you can better estimate the time for each type of lesson.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Teaching can be challenging, but it is also rewarding and fun.&lt;/p&gt;
&lt;p&gt;It is important to come well prepared, and this cheat sheet can help you checklist what you need to do:
&lt;a href=&#34;https://github.com/rstudio/cheatsheets/raw/master/teachR.pdf&#34; class=&#34;uri&#34;&gt;https://github.com/rstudio/cheatsheets/raw/master/teachR.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Teaching is an iterative process in which you can keep improving each time, if you measure and learn from your mistakes.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Settling class action lawsuits with conjoint analysis and R (&#43;a conjoint shiny app)</title>
      <link>https://adisarid.github.io/post/2019-02-03-class-action-conjoint/</link>
      <pubDate>Sun, 03 Feb 2019 12:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2019-02-03-class-action-conjoint/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;A few days ago I presented at the 9th Israeli class action lawsuit conference. You’re probably asking yourself what would a data scientist do in a room full of lawyers?&lt;/p&gt;
&lt;p&gt;Apparently, there is a lot to do… Here’s the story: being in market research, we get a lot of lawyers which are faced with class action lawsuits (either suing or being sued) - and they hire us to conduct research and estimate things like the size of the group for the class action, or the total damages applied on the group.&lt;/p&gt;
&lt;p&gt;This time, we did something special. we conducted our own survey, with consumers in the general public in Israel. The goal was to rate various ways of getting compensation (after settling a class action lawsuit).&lt;/p&gt;
&lt;p&gt;For that we used conjoint analysis. Conjoint is where you ask the survey participants a set of questions (five in our case). Each question has a number of alternatives (or packages) to choose from, and these are randomized per respondent. In our case we showed three packages, each package is defined by three parameters relating to how a consumer can get compensation in case of a class action being won:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Push versus pull - do you have to ask for the compensation or would you get the notification/compensation without asking.&lt;/li&gt;
&lt;li&gt;The value of the compensation - tested at 4 levels (25, 50, 75, and 100 ILS)&lt;/li&gt;
&lt;li&gt;The method of delivery - as a complimentary product, a refund at next purchase, bank cheque, or credit card.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The thing about conjoint analysis is that when you diversify enough, you can then run various models to estimate the weight of each parameter, i.e., using logistic regression.&lt;/p&gt;
&lt;p&gt;The data is available in the &lt;a href=&#34;https://github.com/adisarid/class-action-IL-survey&#34;&gt;github repo&lt;/a&gt;, and the specific data is under the data folder.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#library(tidyverse)
class_action_conjoint &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/adisarid/class-action-IL-survey/master/data/20190130020529-SurveyExport-general_public-conjoint.csv&amp;quot;,
                                  skip = 1,
                                  col_names = 
                                    c(&amp;quot;Response ID&amp;quot;, &amp;quot;Set Number&amp;quot;, &amp;quot;Card Number&amp;quot;, 
                                      &amp;quot;compensation_push_pull&amp;quot;, &amp;quot;compensation_amount_ILS&amp;quot;, &amp;quot;compensation_type&amp;quot;,
                                      &amp;quot;score_selection&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## ── Column specification ────────────────────────────────────────────────────────
## cols(
##   `Response ID` = col_double(),
##   `Set Number` = col_double(),
##   `Card Number` = col_double(),
##   compensation_push_pull = col_character(),
##   compensation_amount_ILS = col_double(),
##   compensation_type = col_character(),
##   score_selection = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(class_action_conjoint)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 7,020
## Columns: 7
## $ `Response ID`           &amp;lt;dbl&amp;gt; 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10…
## $ `Set Number`            &amp;lt;dbl&amp;gt; 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 1…
## $ `Card Number`           &amp;lt;dbl&amp;gt; 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1…
## $ compensation_push_pull  &amp;lt;chr&amp;gt; &amp;quot;push&amp;quot;, &amp;quot;push&amp;quot;, &amp;quot;push&amp;quot;, &amp;quot;push&amp;quot;, &amp;quot;pull&amp;quot;, &amp;quot;pull&amp;quot;…
## $ compensation_amount_ILS &amp;lt;dbl&amp;gt; 75, 50, 25, 100, 25, 100, 75, 100, 50, 25, 75,…
## $ compensation_type       &amp;lt;chr&amp;gt; &amp;quot;another_product&amp;quot;, &amp;quot;credit_cart&amp;quot;, &amp;quot;bank_cheque…
## $ score_selection         &amp;lt;dbl&amp;gt; 0, 0, 100, 0, 100, 0, 0, 0, 100, 0, 100, 0, 10…&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class_action_conjoint %&amp;gt;% count(compensation_push_pull)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 2
##   compensation_push_pull     n
##   &amp;lt;chr&amp;gt;                  &amp;lt;int&amp;gt;
## 1 pull                    3516
## 2 push                    3504&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class_action_conjoint %&amp;gt;% count(compensation_amount_ILS)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##   compensation_amount_ILS     n
##                     &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
## 1                      25  1759
## 2                      50  1761
## 3                      75  1752
## 4                     100  1748&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class_action_conjoint %&amp;gt;% count(compensation_type)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   compensation_type        n
##   &amp;lt;chr&amp;gt;                &amp;lt;int&amp;gt;
## 1 another_product       1391
## 2 bank_cheque           1410
## 3 coupon                1403
## 4 credit_cart           1415
## 5 refund_next_purchase  1401&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that the different options are balanced (they should be - they were selected randomly) and that the number of observations is &lt;span class=&#34;math inline&#34;&gt;\(7,020\)&lt;/span&gt;. This is because we had &lt;span class=&#34;math inline&#34;&gt;\(n=468\)&lt;/span&gt; respondents answering the conjoint question groups, each selecting best one out of three, with five such random sets (&lt;span class=&#34;math inline&#34;&gt;\(5*3*468=7020\)&lt;/span&gt;).&lt;/p&gt;
&lt;div id=&#34;logistic-regression&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Logistic regression&lt;/h2&gt;
&lt;p&gt;The easiest (and most basic) way to start analyzing the conjoint data is with logistic regression. Note that I’m not endorsing this use of logistic regression in conjoint analysis, because nowadays it has become a standard to compensate for mixed effects (see package &lt;code&gt;lme4&lt;/code&gt;). However, for the purposes of this post, I’m going to carry on with the simple &lt;code&gt;glm&lt;/code&gt; which is sufficiently good for our illustration. In any case, my experience is that the models yield similar results in most cases.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glm_set &amp;lt;- class_action_conjoint %&amp;gt;% 
  mutate(score_selection = score_selection/100) %&amp;gt;% 
  mutate(compensation_push_pull = factor(compensation_push_pull,
                                         levels = c(&amp;quot;pull&amp;quot;, &amp;quot;push&amp;quot;),
                                         ordered = F),
         compensation_type = factor(compensation_type,
                                    levels = 
                                      c(&amp;quot;another_product&amp;quot;,
                                        &amp;quot;refund_next_purchase&amp;quot;,
                                        &amp;quot;coupon&amp;quot;,
                                        &amp;quot;bank_cheque&amp;quot;,
                                        &amp;quot;credit_cart&amp;quot;),
                                    ordered = F)) %&amp;gt;% 
  select(-`Set Number`, -`Card Number`, -`Response ID`) %&amp;gt;% 
  mutate(compensation_amount_ILS = factor(compensation_amount_ILS, levels = c(25, 50, 75, 100)))

conjoint_glm_model &amp;lt;- glm(data = glm_set %&amp;gt;% 
      select(score_selection, compensation_push_pull, compensation_amount_ILS, compensation_type),
    formula = score_selection ~ .,
    family = binomial())
summary(conjoint_glm_model)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## glm(formula = score_selection ~ ., family = binomial(), data = glm_set %&amp;gt;% 
##     select(score_selection, compensation_push_pull, compensation_amount_ILS, 
##         compensation_type))
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -1.8635  -0.8111  -0.5139   0.8796   2.6557  
## 
## Coefficients:
##                                       Estimate Std. Error z value Pr(&amp;gt;|z|)    
## (Intercept)                           -3.49667    0.11341 -30.832   &amp;lt;2e-16 ***
## compensation_push_pullpush             0.74140    0.05807  12.767   &amp;lt;2e-16 ***
## compensation_amount_ILS50              1.01476    0.09385  10.813   &amp;lt;2e-16 ***
## compensation_amount_ILS75              1.73623    0.09224  18.823   &amp;lt;2e-16 ***
## compensation_amount_ILS100             2.40149    0.09281  25.876   &amp;lt;2e-16 ***
## compensation_typerefund_next_purchase  0.08431    0.10399   0.811    0.418    
## compensation_typecoupon                1.10396    0.09588  11.514   &amp;lt;2e-16 ***
## compensation_typebank_cheque           1.53888    0.09473  16.245   &amp;lt;2e-16 ***
## compensation_typecredit_cart           1.89640    0.09586  19.782   &amp;lt;2e-16 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 8936.7  on 7019  degrees of freedom
## Residual deviance: 7295.6  on 7011  degrees of freedom
## AIC: 7313.6
## 
## Number of Fisher Scoring iterations: 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how most variables (actually all but &lt;code&gt;compensation_typerefund_next_purchase&lt;/code&gt;) are significant and with a positive estimate (i.e., odds ratio &amp;gt; 1). This means means that when a certain variable increases, the probability of choosing the package increases, i.e.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Passively getting the compensation (“Push”) is better than a required act to get the compensation (“pull”) .&lt;/li&gt;
&lt;li&gt;Any sum of money (50, 75, 100) is better than 25, in an increasing odds ratio.&lt;/li&gt;
&lt;li&gt;Most compensation types (credit card payback, bank cheque, coupon) are significantly better than a complimentary product.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now comes the interesting part: for example, compare the following three packages. Try to guess which one is more attractive:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Package 1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Package 2&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Package 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Push/Pull&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Pull&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Pull&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Push&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Return&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Credit&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Refund&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Coupon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Price&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;75&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It is not that easy to determine between the three. In this situation there is no single strategy which is superior to the others, we can however plot these three packages with the logistic regression response and standard errors. First let’s put them all in a tibble (I also added the best and worst packages).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;package_comparison &amp;lt;- tribble(
  ~package_name, ~compensation_push_pull, ~compensation_amount_ILS, ~compensation_type,
  &amp;quot;pkg1&amp;quot;, &amp;quot;pull&amp;quot;, 25, &amp;quot;credit_cart&amp;quot;,
  &amp;quot;pkg2&amp;quot;, &amp;quot;pull&amp;quot;, 75, &amp;quot;refund_next_purchase&amp;quot;,
  &amp;quot;pkg3&amp;quot;, &amp;quot;push&amp;quot;, 25, &amp;quot;coupon&amp;quot;,
  &amp;quot;worst&amp;quot;, &amp;quot;pull&amp;quot;, 25, &amp;quot;another_product&amp;quot;,
  &amp;quot;best&amp;quot;, &amp;quot;push&amp;quot;, 100, &amp;quot;credit_cart&amp;quot;
) %&amp;gt;% 
  mutate(compensation_amount_ILS = factor(compensation_amount_ILS)) # need to convert to factor - which is how it is modeled in the glm.

predicted_responses &amp;lt;- predict(conjoint_glm_model, newdata = package_comparison, type = &amp;quot;response&amp;quot;, se.fit = T)

# lets join these together

package_responses &amp;lt;- package_comparison %&amp;gt;% 
  mutate(fit = predicted_responses$fit,
         se.fit = predicted_responses$se.fit)

package_responses&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 6
##   package_name compensation_pu… compensation_am… compensation_ty…    fit  se.fit
##   &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;            &amp;lt;fct&amp;gt;            &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
## 1 pkg1         pull             25               credit_cart      0.168  0.0129 
## 2 pkg2         pull             75               refund_next_pur… 0.158  0.0122 
## 3 pkg3         push             25               coupon           0.161  0.0129 
## 4 worst        pull             25               another_product  0.0294 0.00324
## 5 best         push             100              credit_cart      0.824  0.0123&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# P.S. - excuse the &amp;quot;credit_cart&amp;quot; typo (I build the model that way, only then noticed...)

ggplot(package_responses %&amp;gt;% slice(1:3) , aes(x = package_name, y = fit)) + 
  geom_point() +
  geom_errorbar(aes(ymin = fit - se.fit, ymax = fit + se.fit)) + 
  ggtitle(&amp;quot;Package comparison (packages 1-3)&amp;quot;, subtitle = &amp;quot;Error bars represent the SE&amp;quot;) + 
  ylab(&amp;quot;Predicted response (glm logit)&amp;quot;) + 
  xlab(&amp;quot;Package name&amp;quot;) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/post/2019-02-03-class-action-conjoint_files/figure-html/compute%20error%20with%20chart-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(package_responses, aes(x = package_name, y = fit)) + 
  geom_point() +
  geom_errorbar(aes(ymin = fit - se.fit, ymax = fit + se.fit)) + 
  ggtitle(&amp;quot;Package comparison (including best and worst packages)&amp;quot;, subtitle = &amp;quot;Error bars represent the SE&amp;quot;) + 
  ylab(&amp;quot;Predicted response (glm logit)&amp;quot;) +
  xlab(&amp;quot;Package name&amp;quot;) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/post/2019-02-03-class-action-conjoint_files/figure-html/compute%20error%20with%20chart-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We see that the three packages (pkg1, pkg2, and pkg3) are relatively similar, within one standard error from one another. When compared to the worst package they are roughly &lt;span class=&#34;math inline&#34;&gt;\(\sim8\)&lt;/span&gt; times better (via odds ratio), but the best package is &lt;span class=&#34;math inline&#34;&gt;\(\sim5\)&lt;/span&gt; times better than packages 1-3.&lt;/p&gt;
&lt;p&gt;One can use these concepts to illustrate the benefits of each parameter on the different packages, and let the user experience how different features make the packages more or less “attractive”.&lt;/p&gt;
&lt;p&gt;As an experiment, I prepared a nice little shiny app which lets the user experiment with the different features: build two packages and then compare them. You can checkout the code at the &lt;a href=&#34;https://github.com/adisarid/class-action-IL-survey/tree/master/settlement-app/SettlementAttractive&#34;&gt;github repo&lt;/a&gt;, or check out the live app &lt;a href=&#34;https://sarid.shinyapps.io/class-action&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Surveys are a popular tool used in class actions (at least in Israel). They can be used to estimate the tradeoffs between various types of compensation or settlement, for example with the use of conjoint analysis.&lt;/p&gt;
&lt;p&gt;With a glm model one can tell the differences of various packages, and the odds ratio is a way to illustrate to decision makers a comparison of various options (and how much “more attractive” is one package over another).&lt;/p&gt;
&lt;p&gt;A shiny app can be a nice way to illustrate the results of a conjoint analysis, and to let the user experiment with how different features make a specific option better or worse than another option.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Purrring progress bars (adding a progress bar to `purrr::map`)</title>
      <link>https://adisarid.github.io/post/2019-01-24-purrrying-progress-bars/</link>
      <pubDate>Fri, 25 Jan 2019 12:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2019-01-24-purrrying-progress-bars/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;With all the functional programming going on (i.e., &lt;code&gt;purrr::map&lt;/code&gt; and the likes), there is at least one thing that I found missing: progress bars. The &lt;code&gt;plyr::do&lt;/code&gt; function had a nice looking progress bar open up by default if the operation took more than 2 seconds and had at least two more to go (as per Hadley’s description in &lt;a href=&#34;https://github.com/tidyverse/purrr/issues/149&#34;&gt;Issue#149 in tidyverse/purrr&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The issue is still open, for the time of writing these lines, and will probably be solved sometime in the near future as a feature of &lt;code&gt;purrr::map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Personally, I like &lt;span class=&#34;citation&#34;&gt;@cderv&lt;/span&gt;’s elegent solution suggested at that same &lt;a href=&#34;https://github.com/tidyverse/purrr/issues/149&#34;&gt;github issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is an example implementation for reading multiple files within a directory and combining them into a single tibble while showing a progress bar when reading the files. The file reading is very similar to what was suggested in &lt;a href=&#34;https://serialmentor.com/blog/2016/6/13/reading-and-combining-many-tidy-data-files-in-R&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(purrr)
library(readr)
library(dplyr)

# directory from which to read a bunch of files (the example here uses csv)
file_list &amp;lt;- dir(path = &amp;quot;PATH_TO_DIRECTORY&amp;quot;, pattern = &amp;quot;.csv&amp;quot;)

# define reading function which includes the progress bar updates and printing
read_with_progress &amp;lt;- function(filename){
  pb$tick()$print()
  data_read &amp;lt;- read_csv(filename)
  # you can add additional operations on data_read, or 
  # decide on entirely different task that this function should do.
}

# create the progress bar with a dplyr function. 
pb &amp;lt;- progress_estimated(length(file_list))
res &amp;lt;- file_list %&amp;gt;%
  map_df(~read_with_progress(.))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it. You’re set to go with a cool progress bar which will print out something like this while the operation is carried out:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|=====================================           |80% ~23 s remaining&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Short note about tidyeval</title>
      <link>https://adisarid.github.io/post/2019-01-20-short-note-about-tidy-eval/</link>
      <pubDate>Sun, 20 Jan 2019 12:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2019-01-20-short-note-about-tidy-eval/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Following Jenny Bryan’s talk on tidyeval in the last rstudio::conf 2019, I decided to write this short note (mainly as a reminder to myself).&lt;/p&gt;
&lt;div id=&#34;what-is-tidyeval&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;What is tidyeval?&lt;/h1&gt;
&lt;p&gt;Tidy evaluation, or non standard evaluation, allows us to pass column names between functions. This is the “classic” behaviour of most tidyverse functions. For example, we use:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

mtcars %&amp;gt;% 
  select(mpg, cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      mpg cyl
## Mazda RX4           21.0   6
## Mazda RX4 Wag       21.0   6
## Datsun 710          22.8   4
## Hornet 4 Drive      21.4   6
## Hornet Sportabout   18.7   8
## Valiant             18.1   6
## Duster 360          14.3   8
## Merc 240D           24.4   4
## Merc 230            22.8   4
## Merc 280            19.2   6
## Merc 280C           17.8   6
## Merc 450SE          16.4   8
## Merc 450SL          17.3   8
## Merc 450SLC         15.2   8
## Cadillac Fleetwood  10.4   8
## Lincoln Continental 10.4   8
## Chrysler Imperial   14.7   8
## Fiat 128            32.4   4
## Honda Civic         30.4   4
## Toyota Corolla      33.9   4
## Toyota Corona       21.5   4
## Dodge Challenger    15.5   8
## AMC Javelin         15.2   8
## Camaro Z28          13.3   8
## Pontiac Firebird    19.2   8
## Fiat X1-9           27.3   4
## Porsche 914-2       26.0   4
## Lotus Europa        30.4   4
## Ford Pantera L      15.8   8
## Ferrari Dino        19.7   6
## Maserati Bora       15.0   8
## Volvo 142E          21.4   4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two variables were selected out of the &lt;code&gt;mtcars&lt;/code&gt; data set, and we specified them as names without using any quotation marks. They are symbolic, not characters (although they could also be specified as characters, &lt;code&gt;select&lt;/code&gt; is smart enough that way).&lt;/p&gt;
&lt;p&gt;But assume we want to pass variables “tidy style” between functions which do different operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;variation-one---a-basic-example&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Variation one - a basic example&lt;/h1&gt;
&lt;p&gt;We’ll start simple: a function which has two parameters. The first parameter is a dataset. The second parameters is a grouping variable. All other variables in the data set will have their mean computed using &lt;code&gt;summarize_all&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test1 &amp;lt;- function(dataset, groupby_vars){
  grouping_vars &amp;lt;- enquo(groupby_vars)
  dataset %&amp;gt;% 
    group_by(!! grouping_vars) %&amp;gt;%
    summarize_all(funs(mean(.))) %&amp;gt;%
    return()
}

mtcars %&amp;gt;%
  select(cyl:carb) %&amp;gt;%
  test1(groupby_vars = cyl)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: `funs()` was deprecated in dplyr 0.8.0.
## Please use a list of either functions or lambdas: 
## 
##   # Simple named list: 
##   list(mean = mean, median = median)
## 
##   # Auto named with `tibble::lst()`: 
##   tibble::lst(mean, median)
## 
##   # Using lambdas
##   list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 10
##     cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     4  105.  82.6  4.07  2.29  19.1 0.909 0.727  4.09  1.55
## 2     6  183. 122.   3.59  3.12  18.0 0.571 0.429  3.86  3.43
## 3     8  353. 209.   3.23  4.00  16.8 0     0.143  3.29  3.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that &lt;code&gt;mtcars&lt;/code&gt; was grouped by &lt;code&gt;cyl&lt;/code&gt; which was passed as a name (not characters). The function &lt;code&gt;test1&lt;/code&gt; took it, then &lt;code&gt;enquo()&lt;/code&gt;-ed it, and eventually used it in the tidy chain using &lt;code&gt;!!&lt;/code&gt;.
The function &lt;code&gt;enquo&lt;/code&gt; turns the input into a “quosure”. Then the &lt;code&gt;!!&lt;/code&gt; “uses” the quosure to select the proper variable from mtcars.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;passing-arguments-using-...&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Passing arguments using &lt;code&gt;...&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;A slightly more complex situation is passing multiple arguments to the function. Assume that this time we want to construct a function which gets one input by which to group by, and what are the variables to be summarized:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test2 &amp;lt;- function(dataset, groupby_vars, ...){
  grouping_vars &amp;lt;- enquo(groupby_vars)
  dataset %&amp;gt;% 
    group_by(!! grouping_vars) %&amp;gt;%
    summarize_at(vars(...), funs(mean(.))) %&amp;gt;%
    return()
}

mtcars %&amp;gt;%
  select(cyl:carb) %&amp;gt;%
  test2(groupby_vars = cyl, disp:drat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##     cyl  disp    hp  drat
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     4  105.  82.6  4.07
## 2     6  183. 122.   3.59
## 3     8  353. 209.   3.23&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happend is that &lt;code&gt;test2&lt;/code&gt; treats the grouping variable the same way that &lt;code&gt;test1&lt;/code&gt; treated it, but it also passed along the variables &lt;code&gt;disp:drat&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;maximum-flexibility---multiple-enquos&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Maximum flexibility - multiple &lt;code&gt;enquo()&lt;/code&gt;s&lt;/h1&gt;
&lt;p&gt;Sometime passing the dots, i.e., &lt;code&gt;...&lt;/code&gt; is not enough.
For example, if we want specify behaviour for different columns of the data frame (e.g., compute the mean for some and the std for others). In such cases we need a more flexible version. We can extend the flexibilty of this approach using multiple &lt;code&gt;enqou()&lt;/code&gt;s.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test3 &amp;lt;- function(dataset, groupby_vars, computemean_vars, computestd_vars){
  grouping_vars &amp;lt;- enquo(groupby_vars)
  mean_vars &amp;lt;- enquo(computemean_vars)
  std_vars &amp;lt;- enquo(computestd_vars)
  dataset %&amp;gt;% 
    group_by(!! grouping_vars) %&amp;gt;%
    summarize_at(vars(!!mean_vars), funs(mean(.))) %&amp;gt;%
    left_join(dataset %&amp;gt;%
                group_by(!! grouping_vars) %&amp;gt;%
                summarize_at(vars(!!std_vars), funs(sd(.))))
}
mtcars %&amp;gt;% 
  test3(groupby_vars = cyl, disp:drat, wt:carb)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;cyl&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 10
##     cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     4  105.  82.6  4.07 0.570  1.68 0.302 0.467 0.539 0.522
## 2     6  183. 122.   3.59 0.356  1.71 0.535 0.535 0.690 1.81 
## 3     8  353. 209.   3.23 0.759  1.20 0     0.363 0.726 1.56&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the resulting table, the first column &lt;code&gt;cyl&lt;/code&gt; is the grouping variable, columns &lt;code&gt;disp&lt;/code&gt; through &lt;code&gt;drat&lt;/code&gt; have the mean of the corresponding variables, and columns &lt;code&gt;wt&lt;/code&gt; through &lt;code&gt;carb&lt;/code&gt; have their standard deviation computed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-uses-of-tidy-evaluation&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Additional uses of tidy evaluation&lt;/h1&gt;
&lt;p&gt;This evaluation is very useful when building flexible functions, but also when using the &lt;code&gt;ggplot2&lt;/code&gt; syntax within functions, and more so when using Shiny applications, in which input parameters need to go in as grouping or as plotting parameters.&lt;/p&gt;
&lt;p&gt;However, this is a topic for a different post.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;Tidy evaluation empowers you with great tools - it offers a great degree of flexibilty, but it’s a bit tricky to master.&lt;/p&gt;
&lt;p&gt;My suggestion is that if you’re trying to master tidy evaluation, just think about your use case: which of the three variations presented in this post it resembles too?&lt;/p&gt;
&lt;p&gt;Work your way up - from the simplest version (if it works for you) and up to the complex (but most flexible) version.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Recap: what I learned in rstudio::conf2019</title>
      <link>https://adisarid.github.io/post/2019-01-19-rstudio-conf-recap/</link>
      <pubDate>Sat, 19 Jan 2019 12:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2019-01-19-rstudio-conf-recap/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;First, let me start by saying wow!, what a wonderful experience.&lt;/p&gt;
&lt;p&gt;When I booked the trip from Israel to Austin, TX, I thought that I’ll see some good content, and learn at the conference (as I in fact did). It was much more enjoyable than I could’ve imagined. In part I guess this can be contributed to the awesome R community. The ease in which you start a conversation with just about anyone in the conference - about R, professional life (or even personal life), that’s great.&lt;/p&gt;
&lt;p&gt;Besides that, visiting Texas (for the first time) was interesting, but for more on that - see &lt;a href=&#34;#venue&#34;&gt;venue&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;workshop-shiny-train-the-trainer&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Workshop “Shiny Train-the-Trainer”&lt;/h1&gt;
&lt;p&gt;This was a two day workshop. The first day was taught by Greg Wilson, and touched different points of teaching in general, and teaching programming lanugages. The second day was taught by Mine, and zoomed-in on Shiny apps and how to teach building Shiny apps.&lt;/p&gt;
&lt;p&gt;Starting from the theory and building up, Greg was very charismatic. For me, some takeaways from the workshop were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each time you start a new course, choose 1-2 things you want to improve/tryout. Don’t try to go “all-in” because then you might miss. Also, make sure that when you do implement new techniques, you don’t fall short on things you were doing so far which were good.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is going to be slightly cumbersome (I’m also summarizing this for my own good).&lt;/p&gt;
&lt;p&gt;A few things that helps organize and conduct sessions.&lt;/p&gt;
&lt;div id=&#34;figure-out-who-are-your-learners&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Figure out who are your learners&lt;/h2&gt;
&lt;p&gt;Figure out who are your learners: what are they interested in? what do they already know, and what they don’t know. What is the diversity you’re going to get in the crowd (persona analysis).&lt;/p&gt;
&lt;p&gt;Here’s are examples for different personas we cooked up during the workshop.&lt;/p&gt;
&lt;div id=&#34;a-shiny-novice&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A shiny novice&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Background&lt;/strong&gt;: Statisticians and Data Scientists from the pharma industry.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prior knowledge&lt;/strong&gt;: Some knowledge but not state of the art.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Motivation&lt;/strong&gt;: Want to build shiny apps to share information with other functions in the company.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How the course will help them&lt;/strong&gt;: Able to build simple shiny apps and grow from there.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Special needs&lt;/strong&gt;: “&lt;em&gt;Think they know but actually don’t&lt;/em&gt;”.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;a-shiny-expert&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A shiny expert&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Background&lt;/strong&gt;: New company moving from a start-up. Biostatistics PhD.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prior knowledge&lt;/strong&gt;: Used R, made apps for paper presentations, done some shiny apps. Looks good but they know that there are stuff that they don’t know. Mix of formal (for the statistics) but a lot of fun learning on their own.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Motivation&lt;/strong&gt;: Utilize what they have done, but in the context of the organization, and learn about new and cool things.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How the course will help them&lt;/strong&gt;: Teach them the newest and best things of Shiny, in the context of the company. This is how make it production and enterprise ready.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Special needs&lt;/strong&gt;: Work from home. Interaction remote. Dog that barks. Online course.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;a-student-you-expect-to-encounter-at-a-shiny-workshop-you-teach&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;A student you expect to encounter at a shiny workshop you teach&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Background&lt;/strong&gt;: Danny is studying industrial engineering. Undergrad. He is in his third year, and about to finish next year. He likes data science and likes aquiring new programming skills.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prior knowledge&lt;/strong&gt;: Danny has learned some python and some base R, throghout the last few semsters, but he is not fluent in either. Still struggling with some commands in R.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Motivation&lt;/strong&gt;: Danny wants to aquire a new tools that will help him next year when he looks for new work, and will help him impress potential employers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How the course will help them&lt;/strong&gt;: Danny will be able to build apps and use them as showcase while he is looking for work next year. In addition, he will be able to build shiny apps that will help him publish and distribute findings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Special needs&lt;/strong&gt;: Danny has a lot of motivation, but is a novice to R and programming in general. He doesn’t have a lot of time for exercise because the semster courses take up a lot of his time, nonetheless, he is willing to invest the time in projects at specific “peaks” in order to advance his skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;write-the-learning-objectives&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Write the learning objectives&lt;/h2&gt;
&lt;p&gt;Write learning objectives which are observable (by the learners) and also measureable. For example:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The student will build a shiny app that does…&lt;/li&gt;
&lt;li&gt;The students will learn and use the &lt;code&gt;renderPlot()&lt;/code&gt; function, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s another example for learning objectives of a short introductory 1-hour session:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;The students will understand the basic elements of a shiny app and describe the difference between ui, server and global.&lt;/li&gt;
&lt;li&gt;The students will apply the princibles to modify an example reading a file and showing a table with the first 10 lines of the file.&lt;/li&gt;
&lt;li&gt;The students will learn about and be aware of shiny examples in the gallery.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To formulate the objectives, one can use bloom’s taxonomy (and the extended version of it that Mine have shown during class).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;build-conceptual-maps&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Build conceptual maps&lt;/h2&gt;
&lt;p&gt;Build concept maps for each of the topics in the course. I.e., for each class there is a concept map that highlights the topics and the connections between them. Again, referring to the steps in Bloom’s taxonomy as the building blocks of those building blocks. While building the concept maps, remmember that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Roughly 5-9 items can fit in the short term memory. Consider that when building the concept map. Make sure it’s not too complicated.&lt;/li&gt;
&lt;li&gt;To make things slightly easier, while teaching, you can use a whiteboard to expand the concept map and show the class where we are on the concept map.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;write-the-final-exam-and-formative-assesments&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Write the “final exam” and formative assesments&lt;/h2&gt;
&lt;p&gt;Write the final exam, i.e., in the end of the session, what should they be able to answer? This should correspond to the aferomentioned learning objectives.&lt;/p&gt;
&lt;p&gt;Generate formative assesments (short questions for “check-ins”), that will be used during the lesson. These will help you check if the crowd is with you or lost got lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-the-presentation-and-learning-materials&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create the presentation and learning materials&lt;/h2&gt;
&lt;p&gt;Finally, create the learning material around the previous steps. Re-iterate as needed to improve the materials.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;some-more-useful-tools-and-tips&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Some more useful tools and tips&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sticky notes&lt;/strong&gt; are very useful during programming lessons. This way you can see during the lesson where the class is at. Have 4 colors:
&lt;ul&gt;
&lt;li&gt;Green = “everything is fine”&lt;/li&gt;
&lt;li&gt;Red = “need help”&lt;/li&gt;
&lt;li&gt;Blue = “want a break”&lt;/li&gt;
&lt;li&gt;Orange = “want to ask a question”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;For “check-ins” You can use &lt;em&gt;poll everywhere&lt;/em&gt; or a similar solution.&lt;/li&gt;
&lt;li&gt;Interactions between students are very useful. Ask a question. Let them talk with one another to get the answer.&lt;/li&gt;
&lt;li&gt;“Baby steps” - use faded examples or incremental examples when teaching. Avoid a “novice blank page” when starting.&lt;/li&gt;
&lt;li&gt;Encourage the students: “what would you type into stackoverflow to find a solution to this problem?”&lt;/li&gt;
&lt;li&gt;No opting-out. If someone doesn’t know the answer, ask someone else - then go back to that person and ask something else. No one will “fall asleep”, you make sure that everyone are with you. Jump between locations in class (not in the sitting order).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use &lt;a href=&#34;https://rstudio.cloud&#34;&gt;rstudio.cloud&lt;/a&gt;&lt;/strong&gt; when a uniform R environment is desired. We can even start from a flat base instance with all the packages pre-loaded.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;feedback&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Choose an element from above. Use feedback to understand if it was good or not. Choose an existing thing you do and check that you didn’t lose it either.&lt;/li&gt;
&lt;li&gt;Encourage the students to give feedback to one another by interacting in exercises (can scale up to larger classes).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;further-reading&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;p&gt;Check the online materials of the course. Everything is on a creative commons - BY RStudio - license.&lt;/p&gt;
&lt;p&gt;All resources for teaching techniques are available at Greg Wilson’s website &lt;a href=&#34;http://teachtogether.tech&#34;&gt;teachtogether.tech&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Resources specific for Shiny teaching are available at the workshop’s website, including Mine’s teaching notes for 1hr, 2hr, 1/2day, 1day, 2day workshops. See &lt;a href=&#34;https://teach-shiny.rbind.io&#34;&gt;http://teach-shiny.rbind.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conference-day-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conference Day 1&lt;/h1&gt;
&lt;p&gt;Here are some highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Joe Chang’s keynote: lots of tools for testing and profiling shiny apps. Speed improvments for shiny apps using cache (&lt;code&gt;plotCacheRender()&lt;/code&gt;). Showd some techniques to make apps much quicker.&lt;/li&gt;
&lt;li&gt;API development with R and Tensor flow at T-mobile: A really cool use case for using shiny apps and plumber API. This is an example for scaling up a plumber api for a customer facing app.&lt;/li&gt;
&lt;li&gt;Databases using R: the latest: Edgar demonstrated how he connects to a google big query database. The big query server does all the computations and the clean (and smaller data) is input into R for continued analysis. Very cool.&lt;/li&gt;
&lt;li&gt;Working with categorial data in R without loosing your mind: some best practices for working with factors. Advocating &lt;code&gt;forecats&lt;/code&gt; (actually much of these I already implement in my work anyhow).&lt;/li&gt;
&lt;li&gt;Melt the clock: tidy time series analysis: a talk about &lt;code&gt;tsibble&lt;/code&gt; and &lt;code&gt;fable&lt;/code&gt;, the packages which are about to replace the &lt;code&gt;forecast&lt;/code&gt; and &lt;code&gt;ts()&lt;/code&gt;, in a tidy-er version. Can be installed from github and should make life much easier for time series analysis.&lt;/li&gt;
&lt;li&gt;3D mapping, plotting, and printing with rayshader: an extremely cool package for ploting maps from x-y-z (elevation data). A lot of options, and even includes an export for 3d printing of the models.&lt;/li&gt;
&lt;li&gt;gganimate Live Cookbook: A nice package for animating ggplots. But need to carefully choose when to use and when not to use it…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;conference-day-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conference Day 2&lt;/h1&gt;
&lt;p&gt;Great RMarkdown session - kind of made me rethink about how I do my work. For me personally a lot of the work envolves power point and word, but from now on, I think I’ll try to do it on RMarkdown. More reproduceable, easier to recreate, or update if needed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yihui Xie talked about blogdown, bookdown, and more recently pagedown (for academic publications). I also came to know about Radix - a package for Academic style blogs. In the new RStudio (version 1.2 and above, currently in preview), there is an option to export RMarkdown documents into power point presentation. Works seamlessly, just change the yaml at the top:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;This is a power point presentation&amp;quot;
author: &amp;quot;I&amp;#39;m the author&amp;quot;
date: &amp;quot;...&amp;quot;
output: powerpoint_presentation
---&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;gt&lt;/code&gt; package was presented. A package which is great for generating html or &lt;span class=&#34;math inline&#34;&gt;\(\LaTeX\)&lt;/span&gt; tables.&lt;/li&gt;
&lt;li&gt;A cool feature of RMarkdown which I didn’t know about is parameters. It enables to creat variants of an RMarkdown document without actually changing the document. For more info see &lt;a href=&#34;https://rmarkdown.rstudio.com/lesson-6.html&#34;&gt;parameterized reports&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Hadley Wikam talked about a new package in development &lt;code&gt;vctrs&lt;/code&gt; that is supposed to improve type consistency in R. Here’s an example with &lt;code&gt;factor&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;’s default behaviour vs. the &lt;code&gt;vec_c&lt;/code&gt; solution in &lt;code&gt;vctrs&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;c(factor(&amp;quot;a&amp;quot;), factor(&amp;quot;b&amp;quot;))
## [1] 1 1

vctrs::vec_c(factor(&amp;quot;a&amp;quot;), factor(&amp;quot;b&amp;quot;))
## [1] a b
## Levels: a b&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Jenny Bryan talked about lazy evaluation. Finally made some sense to me about when to use &lt;code&gt;enquo()&lt;/code&gt; and when to use &lt;code&gt;!!&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Another good talk about the &lt;code&gt;ipc&lt;/code&gt; package for Shiny apps which require heavy and async computations. That package is able to pass queue and interrupt messages between processes.&lt;/li&gt;
&lt;li&gt;David Robinson from DataCamp gave a really inspiring talk about what you can and should do openly (hence me writing this blog post, in the hopes that it’ll be the first of many).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;venue&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Venue&lt;/h1&gt;
&lt;p&gt;I landed on Monday and the workshops started on Tuesday, so not too much time to hand around, but following the recommendation of the receptionist in my hotel (which was great, Holiday Inn Austin Town Center), I went to Terry Black’s - an original BBQ resteraunt, which was very good (apparantly also very high on TripAdvisor).&lt;/p&gt;
&lt;p&gt;I also checked out the South of Colorado (SoCo) area - it was nice to walk around and by some small things for the wife and kids.&lt;/p&gt;
&lt;p&gt;Parks around the Colorado River - real nice to walk around or jog.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;takeaways&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Takeaways&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Use more RMarkdown and less powerpoint/word.&lt;/li&gt;
&lt;li&gt;Lot of tips on how to improve my R courses (which I should implement).&lt;/li&gt;
&lt;li&gt;Shiny is extremly powerful, much more than what I’m using today. Should probably find the time to improve my own Shiny building/programming skills.&lt;/li&gt;
&lt;li&gt;Do a lot more blogging with R and blogdown.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
