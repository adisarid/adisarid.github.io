<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RStudio server | Adi Sarid</title>
    <link>https://adisarid.github.io/tag/rstudio-server/</link>
      <atom:link href="https://adisarid.github.io/tag/rstudio-server/index.xml" rel="self" type="application/rss+xml" />
    <description>RStudio server</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2023 Adi Sarid</copyright><lastBuildDate>Mon, 15 May 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://adisarid.github.io/media/icon_hu3addb1d2efd6524d7c75d3b1174538d9_629_512x512_fill_lanczos_center_3.png</url>
      <title>RStudio server</title>
      <link>https://adisarid.github.io/tag/rstudio-server/</link>
    </image>
    
    <item>
      <title>Using OTP (one-time passwords) in rstudio server open source</title>
      <link>https://adisarid.github.io/post/2023-05-15-rstudio-server-2fa/rstudio_2fa/</link>
      <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2023-05-15-rstudio-server-2fa/rstudio_2fa/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Lately, I decided to harden security a bit. This included securing my rstudio server (open source version) with one-time passwords.&lt;/p&gt;
&lt;p&gt;Two-factor authentication (or multi-factor authentication) is when you use a username, password, and another means of authentication, mainly a one-time password that&amp;rsquo;s generated and sent via SMS or email or, in this case, created by an authentication app. In this case, I will demonstrate how to enable OTP on the rstudio server login. I.e.: logining into rstudio server with a user name and a one-time password generated by an authentication app.&lt;/p&gt;
&lt;p&gt;At the moment of writing these lines, some posts deal with this kind of set-up, i.e.: &lt;a href=&#34;https://jstaf.github.io/posts/rstudio-server-semi-pro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;https://bartosz.nitkiewicz.me/posts/rstudio-en/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;; however, none of them worked for me. The latter did lead me in the right direction but it&amp;rsquo;s missing a crucial step. Here is the setup I used to enable the OTP on rstudio server.&lt;/p&gt;
&lt;p&gt;The following assumes you have an rstudio server running on linux, with &lt;code&gt;sudo&lt;/code&gt; privileges.&lt;/p&gt;
&lt;h2 id=&#34;installing-google-authenticator&#34;&gt;Installing &lt;code&gt;google-authenticator&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;google-authenticator&lt;/code&gt; is an authentication module that&amp;rsquo;s installed on linux (not to be confused the android app that goes by a similar name). Installing it is the first step:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install libpam-google-authenticator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This module integrates into linux&amp;rsquo;s PAM (pluggable authentication modules).&lt;/p&gt;
&lt;p&gt;Now, log into rstudio as you would regularly and in the terminal run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;google-authenticator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will yield a series of questions and set-up steps, i.e.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Confirm using time-based tokens&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scan the QR-code into your preferred authentication app (e.g., &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;amp;hl=en&amp;amp;gl=US&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;google authenticator for Android&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy your emergency codes for backup&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I also disallowed multiple logins,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Permitted time skews; and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Limited login attempts against brute force attacks).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;edit-the-rstudio-authentication-profile&#34;&gt;Edit the rstudio authentication profile&lt;/h2&gt;
&lt;p&gt;The next step is to edit the authentication profile for rstudio. Inside linux command line (as sudo) run the following code: &lt;code&gt;sudo nano /etc/pam.d/rstudio&lt;/code&gt;, and paste the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auth required pam_google_authenticator.so
@include common-account
@include common-session
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, edit another rstudio server file using: &lt;code&gt;/etc/rstudio/rserver.conf&lt;/code&gt; and paste the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auth-pam-require-password-prompt=0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Save and close the file.&lt;/p&gt;
&lt;p&gt;Restart your rstudio server using &lt;code&gt;sudo systemctl restart rstudio-server.service&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;check-that-everything-works&#34;&gt;Check that everything works&lt;/h2&gt;
&lt;p&gt;Go to your rstudio server login page and enter your user name. In the password text box enter the code shown on your authentication app. You should be able to log in with the OTP generated by your authentication app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set up RStudio server with Let&#39;s Encrypt SSL certificate</title>
      <link>https://adisarid.github.io/post/2020-03-06-setup_rstudio_server_with_ssl/</link>
      <pubDate>Fri, 06 Mar 2020 22:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/2020-03-06-setup_rstudio_server_with_ssl/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;For a while now I’ve been struggling with various installation setup related to the open source versions of RStudio server, Shiny server (and dockerized versions of them).&lt;/p&gt;
&lt;p&gt;After browsing internet tutorials on-and-off for the last couple of weeks I’ve come to the conclusion that there is a small gap when it comes to setting up RStudio server and shiny server securely, i.e., with SSL certificates.&lt;/p&gt;
&lt;p&gt;I’ve put together this step-by-step post to close this gap (in part for self-documentation). I don’t cover dockerized versions here.&lt;/p&gt;
&lt;div id=&#34;step-1-or-actually-steps-1-10&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 1 (or actually steps 1-10)&lt;/h2&gt;
&lt;p&gt;Install rstudio server and shiny server on your choice of cloud provider. Common choices are AWS (EC2 or Lightsail, Digital Ocean, Azure, and Google. Anything works actually).&lt;/p&gt;
&lt;p&gt;Installation instructions are covered in detail in Dean Attali’s post &lt;a href=&#34;https://deanattali.com/2015/05/09/setup-rstudio-shiny-server-digital-ocean&#34;&gt;here&lt;/a&gt; which uses Digital Ocean.&lt;/p&gt;
&lt;p&gt;No use repeating everything in its entirety. I will however highlight two things I’ve found helpful and are a bit different from Dean’s post.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Selection of instance size (resources)&lt;/li&gt;
&lt;li&gt;AWS Lightsail’s deafult firewall settings&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;selection-of-instance-size&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Selection of instance size&lt;/h3&gt;
&lt;p&gt;I’ve found that opening an instance with low memory (i.e., 0.5-1Gb) is problematic. Its cheap, but if you’re installing packages such as &lt;code&gt;dplyr&lt;/code&gt; (included in &lt;code&gt;tidyverse&lt;/code&gt;), compiling the package within your server, will require more memory than what you have available. You can workaround this by increasing your swap file size (step 6 in Dean’s post), but eventually even R processes might give you a hard time in the future. I’ve been using a 4GB server, which seems to be ok for my purposes (and at the time of writing this post costs about $20 USD per month).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;aws-lightsails-firewall-settings&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;AWS Lightsail’s firewall settings&lt;/h3&gt;
&lt;p&gt;When using &lt;strong&gt;AWS Lightsail&lt;/strong&gt; (which I’ve been using), a default firewall rule is applied. This means that when you complete steps 7-8 in Dean’s post, your server will not work if you’re using AWS Lightsail. The reason for that is that AWS Lightsail built-in firewall blocks all ports except 22 and 80 by default (rstudio server uses 8787 and shiny server uses 3838). It doesn’t matter much, because by the end of this post we’ll be using port 443 (for secure SSL connection), but you can also make the non-secure version work out - useful for checking that your server is working. Let’s go ahead and open port 443 in your Lightsail instance (and explain how to also temporarily open 8787 and 3838).&lt;/p&gt;
&lt;p&gt;Click on the instance you’ve opened, and then go to the Networking tab. In this page you’ll see a “Firewall” title and beneath it a table with the currently open ports. Under the table click on “+ Add another”. Add HTTPS (under application), TCP (under protocol) and port 443, like in the following screenshot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#39;https://adisarid.github.io/media/lightsail_firewall_configuration.jpg&#39;&gt;&lt;/p&gt;
&lt;p&gt;If you want to temporarily enable direct access to port 8787 and 3838 (to check that your installation went well), you can do that as well (use “Custom” under application, TCP for protocol, and port 8787 (repeat for 3838 in an additional line).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;secure-you-server-with-ssl-encryption&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Secure you server with SSL encryption&lt;/h2&gt;
&lt;p&gt;Since you will probably be passing data back and forth between your remote server and local computer, you want to secure this data transfer with encryption. The best way to do this is using SSL certificates (it’s actually called TSL, the name SSL refers to a deprecated protocol, but everyone seems to still be using the SSL initials, &lt;a href=&#34;https://www.cloudflare.com/learning/ssl/what-is-ssl/&#34;&gt;see here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There is a free service called Let’s Encrypt which provides SSL certificates, which is what we’re going to use here. I’m actually adopting the approach of &lt;a href=&#34;https://docs.fuga.cloud/how-to-use-lets-encrypt-certificates-to-secure-nginxs-ssl-configuration&#34;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;install-lets-encrypt-and-get-certficates&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Install Let’s Encrypt and get certficates&lt;/h3&gt;
&lt;p&gt;Install the following software on your linux server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt instal letsencrypt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update your nginx configuration as preperation for obtaining the let’s encrypt certificate. This step is needed because when requesting a certificate from let’s encrypt, the let’s encrypt server will try to authenticate your server.&lt;/p&gt;
&lt;p&gt;Use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/nginx/sites-enabled/default&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And add the following (replace &lt;code&gt;r.example.com&lt;/code&gt; with your domain):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen 80;
        listen [::]:80;
        root /var/www/r.example.com/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name r.example.com;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get your SSL certificates using the following line, just replace &lt;code&gt;r.example.com&lt;/code&gt; with your subdomain.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;letsencrypt certonly -a webroot --webroot-path=/var/www/r.example.com/html/ -d r.example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update your nginx settings again&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /etc/nginx/sites-enabled/default&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To have the following setup (remember to replace &lt;code&gt;r.example.com&lt;/code&gt; with your domain):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map $http_upgrade $connection_upgrade {
  default upgrade;
  &amp;#39;&amp;#39;      close;
}

# listens on port 80 and redirects traffic to secure alternative
server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name r.example.com;
        return 301 https://r.example.com$request_uri;
}

server {
        
        # SSL configuration
        
        listen 443 ssl;
        ssl_certificate /etc/letsencrypt/live/r.example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/r.example.com/privkey.pem;
        ssl_protocols TLSv1.2;

        ssl_ciphers EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
        ssl_prefer_server_ciphers On;
        ssl_session_cache shared:SSL:128m;
        add_header Strict-Transport-Security &amp;quot;max-age=31557600; includeSubDomains&amp;quot;;
        ssl_stapling on;
        ssl_stapling_verify on;

        root /var/www/r.example.com/html;

        server_name _;

        # Reroute traffic to shiny server (i.e., reverse proxy for port 3838)
        location /shiny/ {
           proxy_pass http://127.0.0.1:3838/;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection $connection_upgrade;
           rewrite ^(/shiny/[^/]+)$ $1/ permanent;
        }

        # Reroute traffic to rstudio server (i.e., reverse proxy for port 8787)
        location /rstudio/ {
           proxy_pass http://127.0.0.1:8787/;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection $connection_upgrade;
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your server should be working now, but since Let’s Encrypt certificates only last 90 days, lets put an automatically renewal process in place.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo nano /opt/renewCerts.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Paste the following text:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
# This script renews all the Let&amp;#39;s Encrypt certificates with a validity &amp;lt; 30 days
if ! letsencrypt renew &amp;gt; /var/log/letsencrypt/renew.log 2&amp;gt;&amp;amp;1 ; then
    echo Automated renewal failed:
    cat /var/log/letsencrypt/renew.log
    exit 1
fi
nginx -t &amp;amp;&amp;amp; nginx -s reload&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure the script is owned and executable by root:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chown root.root /opt/renewCerts.sh
chmod u+x /opt/renewCerts.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add it to cron for auto execution:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo crontab -e&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@weekly /opt/renewCerts.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;all-should-be-set&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;All should be set!&lt;/h2&gt;
&lt;p&gt;Go ahead and browse to your domain (e.g., &lt;code&gt;https://r.example.com/rstudio&lt;/code&gt;). Check that you’re able to login properly and that all pages are secure on &lt;code&gt;https&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
