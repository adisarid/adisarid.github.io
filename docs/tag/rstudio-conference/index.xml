<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rstudio conference | Adi Sarid</title>
    <link>https://adisarid.github.io/tag/rstudio-conference/</link>
      <atom:link href="https://adisarid.github.io/tag/rstudio-conference/index.xml" rel="self" type="application/rss+xml" />
    <description>rstudio conference</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>¬© 2023 Adi Sarid</copyright><lastBuildDate>Fri, 29 Sep 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://adisarid.github.io/media/icon_hu3addb1d2efd6524d7c75d3b1174538d9_629_512x512_fill_lanczos_center_3.png</url>
      <title>rstudio conference</title>
      <link>https://adisarid.github.io/tag/rstudio-conference/</link>
    </image>
    
    <item>
      <title>Insights from Posit::conf(2023)</title>
      <link>https://adisarid.github.io/post/insights-from-posit-conf-2023/</link>
      <pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://adisarid.github.io/post/insights-from-posit-conf-2023/</guid>
      <description>


&lt;p&gt;I‚Äôve been attending posit::conf since 2019 (when it was still called rstudio::conf), and this year was no different. I really like the keynotes, talks, the community, meeting like minded data science, and R/Python enthusiasts. In this blog post we‚Äôll delve into some of the key takeaways from the conference.&lt;/p&gt;
&lt;div id=&#34;designing-data-visualizations-to-successfully-tell-a-story&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Designing Data Visualizations to Successfully Tell a Story üìä&lt;/h2&gt;
&lt;p&gt;This one-day workshop was led by C√©dric Scherer and discussed how to create visualizations that emphasize a specific message. I think that C√©dric makes a good distinction between visualizations meant for exploration versus those meant for explanation. The former is usually used during the research phase (tidy &amp;lt;-&amp;gt; model &amp;lt;-&amp;gt; visualize) and the latter at the communication of the findings.&lt;/p&gt;
&lt;p&gt;If you‚Äôre familiar with &lt;code&gt;ggplot2&lt;/code&gt; then you already have everything you need - the difference is the paradigm. Understand the message you want to convey, think like a designer, and make sure that the chart conveys that message. Preferably a single message per chart.&lt;/p&gt;
&lt;p&gt;If you‚Äôre interested, the workshop‚Äôs repo is &lt;a href=&#34;https://github.com/posit-conf-2023/dataviz-storytelling/tree/main&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;deploy-and-maintain-models-with-vetiver&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Deploy and maintain models with &lt;code&gt;vetiver&lt;/code&gt; üèÉ&lt;/h2&gt;
&lt;p&gt;This is another (one-day) workshop that I attended. This workshop was led by Julia Silge (the author of the &lt;code&gt;vetiver&lt;/code&gt; package). The package supports machine learning operations, i.e., practices to deploy and maintain machine learning models in production.&lt;/p&gt;
&lt;p&gt;The workshop surveyed the main capabilities of &lt;code&gt;vetiver&lt;/code&gt; starting from deployment of models into &lt;code&gt;plumber&lt;/code&gt; APIs, saving and versioning models with related meta-data (e.g., model performance) via the &lt;code&gt;pins&lt;/code&gt; package, creating docker containers of models and APIs for easy deployment, and related practices.&lt;/p&gt;
&lt;p&gt;The workshop also covered integration with Posit connect (i.e., for using &lt;code&gt;pins&lt;/code&gt; and API deployment), however, these can also be implemented relatively easily in common cloud provides such as AWS (EC2 for API + S3 for pins) or Azure (VM + storage) or GCP equivalent.&lt;/p&gt;
&lt;p&gt;The workshop covered a lot of ground and I‚Äôm excited to try everything out! (hours of fun üòä).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;large-language-models-keynote&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Large Language Models keynote ü§ó&lt;/h2&gt;
&lt;p&gt;A fascinating keynote by Jeremy Howard. Jeremy provided some background on the training stages of LLMs (ChatGPT specifically), and provided some hacks (like custom instructions), that can improve the results of the models.&lt;/p&gt;
&lt;p&gt;Jeremy also showed how he installs, fine-tunes, and uses various open-source models from &lt;a href=&#34;https://huggingface.co/&#34;&gt;huggingface&lt;/a&gt;, uses ChatGPT for programming (creating custom code/functions), and more.&lt;/p&gt;
&lt;p&gt;The talk was a video recording and is already available for watching here: &lt;a href=&#34;https://www.youtube.com/watch?v=jkrNMKz9pWU&#34; class=&#34;uri&#34;&gt;https://www.youtube.com/watch?v=jkrNMKz9pWU&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-things-worth-mentioning&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Additional things worth mentioning üî¶&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There have been developments in WebR + shinylive. shinylive is now available for building shiny apps and using them without a server (i.e., building shiny apps in R and providing them for running completely on the user‚Äôs browser). They can be combined in static HTML pages, quarto/markdown documents, and even used offline.&lt;br /&gt;
See the &lt;a href=&#34;https://github.com/posit-dev/r-shinylive&#34;&gt;shinylive repo&lt;/a&gt; for using shinylive from R (not yet on CRAN), and examples &lt;a href=&#34;https://shinylive.io/r/examples&#34;&gt;here&lt;/a&gt;. However, note that shinylive is not secure (in the sense that the source code can be pulled by the user), so if your app has sensitive information - don‚Äôt use shinylive. Also I find it a bit slow. I think that it can be well suited for educational purposes (e.g., combining apps in online books, blogs, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some talks about &lt;code&gt;duckdb&lt;/code&gt; and related R packages (&lt;code&gt;duckplyr&lt;/code&gt;, &lt;code&gt;duckdb&lt;/code&gt;): it‚Äôs an in-process data management system. It provides a solution for working with large datasets (that do not fit in-memory). Data can be loaded to a duckdb and R works with duckdb for pulling the data that‚Äôs required for the analysis instead of all of the dataset. View &lt;a href=&#34;https://reg.conf.posit.co/flow/posit/positconf23/attendee-portal/page/sessioncatalog/session/1685040650710001GM9G&#34;&gt;this talk&lt;/a&gt; by Hannes M√ºhleisen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub copilot is now available on RStudio.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Quarto - interesting talk showing extensions. More on quarto extensions &lt;a href=&#34;https://quarto.org/docs/extensions/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Typst integration with quarto - a replacement for LaTeX as a pdf compiler, typst is much faster in compiling documents. Currently implemented in the quarto pre-release 1.4 version. I have tried to play with it a bit, but it seems as though customizing/building templates requires knowledge in the typst language (which is a kind of a new markdown scripting). Looks promising.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The posit::conf(2024) conference was announced - it will be in Seattle from 12 to 14 of August. Only three days this time: one workshop day and two conference days.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion üòé&lt;/h2&gt;
&lt;p&gt;As usual, posit::conf 2023 proved to be an exceptional community gathering that provided us with a rich array of insights, tools, and innovative ideas to ponder and elevate our professional endeavors. I eagerly anticipate the forthcoming posit::conf event in Seattle.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Impressions and notes from rstudio::conf2020</title>
      <link>https://adisarid.github.io/post/2020-01-31-rstudio-conf2020-recap/</link>
      <pubDate>Fri, 31 Jan 2020 06:08:00 -1000</pubDate>
      <guid>https://adisarid.github.io/post/2020-01-31-rstudio-conf2020-recap/</guid>
      <description>
&lt;script src=&#34;https://adisarid.github.io/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I‚Äôm just on my way back from this year‚Äôs rstudio::conf. Here‚Äôs an account of a few of the things which I found interesting, inspiring, or that might have some other impact in the future. I‚Äôm listing them by order of appearance in the conference.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/media/Hexagons_conf2020.jpg&#34; alt=&#34;The hexawall at rstudio::conf2020&#34; style=&#34;zoom:10%; float:right; padding-left:30px&#34;&gt;
&lt;!-- ![](/post/2020-01-31-rstudio-conf2020-recap_files/icon.png) --&gt;&lt;/p&gt;
&lt;div id=&#34;the-rmarkdown-and-interactive-dashboards-workshop&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The RMarkdown and Interactive Dashboards Workshop&lt;/h2&gt;
&lt;p&gt;I participated as a TA in the RMarkdown and Interactive Dashboard workshop led by Carl Howe and Yihui Xie. The workshop dealt with creating RMarkdown documents. Specifically adding interactivity using the &lt;code&gt;flexdashboard&lt;/code&gt; package to turn a simple docuement into an interactive html with just a few &lt;code&gt;yaml&lt;/code&gt; configurations.&lt;/p&gt;
&lt;p&gt;Some attention was also given to combining different programming languages within documents, i.e.¬†python via the &lt;code&gt;reticulate&lt;/code&gt; package, but also &lt;code&gt;css&lt;/code&gt; and many more.&lt;/p&gt;
&lt;p&gt;A lesser known feature (at least for me) was the &lt;code&gt;crosstalk&lt;/code&gt; package which makes it really easy for different widgets in an RMarkdown document talk to each other.&lt;/p&gt;
&lt;p&gt;Yihui talked about some cool tips and tricks and features of rmarkdown (and surrounding packages). For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The use of the &lt;code&gt;xaringan::infinite_moon_reader()&lt;/code&gt; to continously render an Rmd upon save (automatically knits the document)&lt;/li&gt;
&lt;li&gt;Creating animation inside Rmds&lt;/li&gt;
&lt;li&gt;LaTeX tricks within Rmds&lt;/li&gt;
&lt;li&gt;Caching time consuming Rmd chunks&lt;/li&gt;
&lt;li&gt;Many more&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actually, these are just a few, and there were 23 distinct tips. Yihui‚Äôs presentation is &lt;a href=&#34;https://slides.yihui.org/2020-rstudio-conf-rmarkdown-recipes.html&#34;&gt;available here&lt;/a&gt;. All the materials of this workshop, and in fact all the workshops, is available &lt;a href=&#34;https://github.com/rstudio-conf-2020&#34;&gt;in this github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example of an animation of a wave in an Rmd file. To replicate the example, use the following code in the chunk specifications: &lt;code&gt;{r, animation.hook=&#39;gifski&#39;, fig.height=3, interval = 0.15}&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_set &amp;lt;- crossing(frame = seq(0, 360, 30), x = seq(0, 2*pi, pi/10)) %&amp;gt;% 
  mutate(y = sin(x - frame*pi/360)) %&amp;gt;% 
  nest(data = c(x,y))

map(data_set$data, ~{
  ggplot(., aes(x, y)) + geom_line()
})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/media/ggplot2_animated_wave.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Cool, isn‚Äôt it?&lt;/p&gt;
&lt;p&gt;If you‚Äôre into animations, there are other packages which can also accomplish this, such as the &lt;code&gt;gganimate&lt;/code&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;deploying-end-to-end-data-science-with-shiny-plumber-and-pins&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Deploying End-to-End Data Science with Shiny, Plumber, and Pins&lt;/h2&gt;
&lt;p&gt;A nice talk by Alex Gold from RStudio. Showed a use case for a plumber api combined with a shiny app that talk to each other. For me, mainly the concept of &lt;code&gt;pins&lt;/code&gt; as a quick approach for small to medium sized data sets was nice to see. You can easily put a data set in an S3 or any other means of storage on Azure, GCP, Github, etc. The downside compared to a database is that there is no frequent backup or an option to roll back changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;were-hitting-r-a-million-times-a-day-so-we-made-a-talk-about-it&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;We‚Äôre hitting R a million times a day so we made a talk about it&lt;/h2&gt;
&lt;p&gt;A talk by Heather and Jacqueline Nolis from T-Mobile. This was kind of a follow-up talk on what they discussed in the previous rstudio::conf (2019), but this time they came with some important lessons from their in-field experiences.&lt;/p&gt;
&lt;p&gt;For example, talking about garbage collection in R which happens once in a while and causes response times to lag. Can be avoided by manually calling the garbage collection with &lt;code&gt;gc()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;asynchronous-programming-in-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Asynchronous programming in R&lt;/h2&gt;
&lt;p&gt;Winston Chang demonstrating some ways for Asynchronous programming with the &lt;code&gt;later&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;An interesting thing he Winston demonstrated was that you can open up a server using &lt;code&gt;websocket&lt;/code&gt; and &lt;code&gt;httpuv&lt;/code&gt; to interact with the R process even if the rstudio console is busy (i.e., for example during a shiny app run).&lt;/p&gt;
&lt;p&gt;Materials of the talk will probably be available here &lt;a href=&#34;https://github.com/wch/2020-01-later&#34;&gt;https://github.com/wch/2020-01-later&lt;/a&gt;, though as of the time of writing these lines, the repo is empty. Maybe &lt;code&gt;later&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;of-teacups-giraffes-r-markdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Of Teacups, Giraffes, &amp;amp; R Markdown&lt;/h2&gt;
&lt;p&gt;A lovely and ispiring talk by Desiree De Lean, about how she (and a co-author) used a sort of Gamification to develop a statistics course. The course is based on the mysterious world of teacup Giraffes, and introduces statistical concepts with a nice and appealing twist.&lt;/p&gt;
&lt;p&gt;Another innovative approach this used was to combine &lt;code&gt;learnr&lt;/code&gt; iframes within the RMarkdown book they used, which makes the experience of the learner interactive. The &lt;code&gt;learnr&lt;/code&gt; segments are hosted in turn on shinyapps.io.&lt;/p&gt;
&lt;p&gt;The book is available online &lt;a href=&#34;https://tinystats.github.io/teacups-giraffes-and-statistics&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;styling-shiny-apps-with-saas-and-bootstrap-4&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Styling Shiny apps with Saas and Bootstrap 4&lt;/h2&gt;
&lt;p&gt;Joe Chang introduced the &lt;code&gt;bootstraplib&lt;/code&gt;package which provides much more flexibilty when composing your own theme for a shiny app. It takes away a lot of the pains related with CSS-ing your way aound the complexities of a shiny app UI.&lt;/p&gt;
&lt;p&gt;The package is still experimental, more info &lt;a href=&#34;https://rstudio.github.io/bootstraplib/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I talked to Joe Chang a bit, the package is not going to solve problems such as right-to-left localization for Hebrew.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;d-ggplots-with-rayshader&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3D ggplots with rayshader&lt;/h2&gt;
&lt;p&gt;A cool presentation by Tyler Morgan Wall author of the &lt;code&gt;rayshader&lt;/code&gt; package. Demonstrated how ggplot2 charts can be easily rendered into a 3d model.&lt;/p&gt;
&lt;p&gt;Mostly relevant for illustrating surfaces. The rayshader can be used to turn this plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;surface &amp;lt;- crossing(x = seq(0, 2*pi, pi/20), y = seq(0, 2*pi, pi/20)) %&amp;gt;% 
  mutate(z = sin(x)*x + cos(3*y))
surface_plot &amp;lt;- ggplot(surface, aes(x = x, y = y, fill = z)) + 
  geom_tile()
surface_plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/post/2020-01-31-rstudio-conf2020-recap_files/figure-html/surface%20as%20a%20tile%20countour-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Projected as a 3d model using the rayshader here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rayshader::plot_gg(surface_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://adisarid.github.io/media/rayshader_snap.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Tyler also demonstrated how you can generate a movie with the camera browsing around the chart. Beware, rendering takes long.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Obviously, there were many more notable talks at the conference, but this post was meant as a short list highlighting just a few.&lt;/p&gt;
&lt;p&gt;To sum up, the rstudio conf, was a great opportunity to meet up with collegues (old and new), brush up on some of the advanced and noval packages, see how the rstudio team is planning and seeing the future of RStudio and of the R ecosystem, and enjoy San Fransisco!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
